%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96 Copyright 2007 Radical Eye Software
%%Title: mtiipractice2.dvi
%%CreationDate: Fri Nov 07 13:47:19 2008
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMBX12 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o mtiipractice2.ps mtiipractice2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2008.11.07:1347
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 19 /acute put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 80 /P put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F90A32C4175B6BFB279
024EAE1B04D721A6C54FD62484F8949B2CE9B87D9CEE04DFF82BF14931B3CA03
AA5F701B6F80BBCDF2C427C40A51597F0B1BFA25EDD7CE0EAF2EC676BF0059B7
15DD5462BA30DE78A08DD533DC0E8D85F9DAFC5FD842F417265427E0F1B71834
D2BF6EFAC3CCC40D3EF3B2E2080F148441BA45E5D0C0F7D8416730AF4BE4FC93
1E965594E0364F0D4F1EC48004CEBDDAFB1F0EE0A8222358EAC0F62E6BFA3C9F
46875EB4C999219B91E6147A49A668505667030CDF3495682B79C0F614AAEE68
D976EFCDCB04127C0D7325A2211E49CD316935A0B472D1F9FFC68F7FBEBC7582
036CB393016193A9783DD08D647E89C5BA4EFC8701BCCB6A5C027C4FA8644C06
251B9E33FFEBB1B84AC4D4B148205C8CA7AF5EF97F2788EFB0B71473AD0F5EB4
FC43F46602C53E53F5A6D1E445439F65967C51EAB636178FA377DB2DDE5FEF41
9E91F3BEBCFBD3B4EBB510A0DF7F4D19C6552BC98F10E25612B1396020D7836F
A3D3C865661DB276E428F09F048A916B4F07D8FD01AC1942A3CA342B0E531BF2
3E9A7AF265ACE1585E331A8F8B5AE06FF085C1F349215581FC7D6EF6869A9A97
1731BCADE111C50AB7FBB87D6B3CE93501772326E7B49A2AE46D4E512B988DB6
40B072A8E2493D8C103A21012A6EA10D9C8D741BAD7871776B6A4EE93C853DD3
561EBCBF76153BDFB19DA55B3F6335426B6A2341ADDBB9DDEFD18F912AD1238B
5353DBAAFC709170E171D9BC7ECA7FEA2B7ABE317AAB1C982F262473FAD6E6F0
FF9503FD7C96DD6DE37271B0F45FA5C10D635003BDDA32888BE7CD8EB0DC388F
F414384316E1E954B7D91BCBCF0B12D9A01502C9C4E179156D69347EE2CB1A2C
F361711E37B54D15F8F1301F7B2776DC8DF7A1BD7F3BD195C7CF4E839E77C7C0
5525B0E947C7826F9E3E5165029E3A7C6C9FF692B6B7C3975718BD9F7CED4A05
FAE988143087E19819F8A06AAB8F853118C41E5697113A8E5F05F73B70F5FD1D
B2E526AC429EE5B99857CB389947B4483FAD1C55E098E683784D806A305E6F87
A09208124D008ACD573F96BF8C81716368E01D9130D3010FCB203D50D9D28E44
1C1473163BAC63F64DD8B0B3F9E792F4CAB00C02535D30F3EA7ACBF7D37855B9
A269A587593874C61B02AE2ACC131F065B48BD8064208BA4DC5890BC8D87E273
D6C1F8E9B0678F1C75B4349CDA73257D29380EEC73115A5A29476D3424655BCB
35203B6443F3B22DF1FA277F64393E392FB6E03191EA7B0B29410CA400283C58
97BD7130C54FE2A07DD2179D8227BD00D924030377E95C9B1336AE17A3678C0E
75E4646084D9A689F2C981C64683ECE411F9A342B75074A87C7A190A170D23B9
535F8A86E45DAB0A297AF89248FFB548FD801AE3362014F049D14B16E8CAA48D
18DE6EE02B5C620AE9E2D0E817FA23455F670E8BADB2B661F80717A78F08D4FC
0B5E4386DCF5564574163D19CEE72D25138EE46E019E25A4051F11E82FC855E4
3BE89119B020FF289510BDE5C6FB6679DB4107534EAC9349210F77761D0D9A6F
22A96FB97D226706DFB7C15CF9FDF3764CB6B9B78F825EA672B6F344A58629F4
68F1F91AA071C42E4C2EFA2BD4D94EF6AF03618278B3D07A97E35B11D32E67AB
612B47F346D4B2D5527A083ACF5411731FA1612096288F20CA769CCF34E7705D
80DE3E67E2886458E47AC71DB2586586EBA8361DC373CA755C950B0ADE640B90
3A22C87A67C5938B5B34F49E8A138630E929ABF0A854954110B0F8B3129EC273
9730DB02123183CDE577F31D2DD5087B71A568F29E9C50589A9A741BEEE975B8
B64C8034A34EFD7A25D6BAB32E4AE4AD1D1FAD2A4D7C2581AA4A04A7DB6100BA
9D930DEC36F79665650D3B64C1EAED67BF7130B40B6F60A8FBF6585D80EAF06B
FF7B30CEBB5CD6EAB38956142C273F51DC0FDFF89C7D4D55C74592A08B1C96A8
83DFDFDABEC022CA1392D2C21B28838135B934229FF06796B68DE8A2E3294F7B
50E48B01A6121C4985F21AA3C609273ABC62BC1E52A57B872378DEE48C454794
9333C25C5914C55B5150A05B4E1384434421D7855EE2DD94C8F487876E7DDBFA
43FE5100263A3F9B1DC5142ABFAA640C43BAB1AA780A111D776A26C0677C2B12
3681AC6D6425D23EBFE373DC23D13FAA6577403F84FABEEB4755454A3AA0A37A
7138F33E73855EB5A66B4A7359D1685523E56BDC749FF8C8D399FB192BB4537C
86A0C181A881823E229BDF99B225008FE616F8CCA5976D75D6FB6B89F003B5C1
92F5F237A0DF8E8631882E5CF6D111CEFDFDE6776FEC388098DEAF571D88D635
94FB928B676B05A81F17882FDAC43AD5406A90E72249A7F534B06BE5DB817AB0
9D370BCFB5E5D4C2FA06A9C42AA8088E991529F3612F0F16234E42FD7AC2FE29
C979F35E6311D94AC93E4C5B2EB8A23DF65E57D805B9263121C7B3F152785C43
3D4E76FECCCE65F27E8A5B45F0D6EB00730AD4DA305AF780FB6C2405C9F131EA
0CB6FAB9AE7FBEB6389588C5B92C7240CEC90150D7C8D4AD1DED2861D6DEA4ED
A8A72290C2E38BB198F1CC4B6F6B55CD309052978922C695FBC90780B4C13BA6
5428102E21F361B944347BF5F81E947115EFAC3DD47CD62244F04A8564E76059
130636E1077760DCEEEAE78FD836C35745DDDA0DCE8A6F7F85C6E6BED67741F4
C5D63F751BC70AC91098E004B4945A7113D136843D47E7B6CB6109DD50C97A9A
6FF37CBEEF9A5DDA95AF0192FB37A8025415B599AD6042D674FF22086A34F2D2
59E9C2B6D2A4763E17959ADA00C1442FBCDF34DF756D3F0F3653276ED6565DDE
4FF817C76FA1131F08CD22BFD4B94446862474919F0400F4FD705723B7181656
672A5537BDA2AD2CCCE50A4BFC34595259B362AAE97A548EFDD940FFF1216D2F
0ED44E878B97DF1ED89ED10C8355DA3684213F806DAAF38ADC1626CE0784E589
51068E7E13E20EFEF95D419A356DF061F382FF083A6E5DCCE11E01274942D545
6AC0FE6A8B3430FD313C21B46067F6CA207DD8CFC3DA141AB8B430A630AADD3B
16CBB536B891A9387FC2E860292917532540B7832D791336C40AC0DB2B24B2A0
030A33927004F44B0E5C21BFA5CCD0BE4250106547F3B6092117F2571033BB4F
9028EB23CDDF92CE8344349984E0AC1C060B5BAC13FB16BE4A29AFE739C0EF78
60E8F0605E0949D633320A01649022C76B780F1AA2C4C22FCEFD2A881067314D
3F97F4E618C1ABD3A404B8B42BFAAE7867E523AEC9617C4B7EF3D519D0D7AEEB
F6E8B1D498594DD0C2AB4C6D010D6DC60BE19283AE28DE1104EA575AD844DCEC
9A8A6334871DBF745724EF53D00B473A57938506070A2B8CA7EEC213221ED4A5
8A4980D41351C26DB7AAB8729BBADD7B9C21F381A01E3FA61ADB64040CFA87A8
1FAB0948DBA928A627D9AE95483B1591ABE92B018E29376C84A6E6A939F6F285
FC7A587777E0C79662F06657480225E38B5154E7A8A20DC410702C71C211DA8C
E6D7954DAF30F205C519674DF19CA372DDFEA08973305A323E08F5F5F00C4B3B
F1C343F5FE860041887205811745E436EC3148DCD59AC2490C1F55A66115D46B
7915C7D619CC44AF2CF604F0DA795B918586F7973A9764BB8018A10DC5507F1F
F49E26F35ACE6A3BE92A92BBA9B8CEDED72B928AB9DEECD02418B94C40A3C3A7
080415721764FD593763BAA9AC58B2A72BA3557438751C2E3C9FA31D9305E68C
26845586E38DED707D9306B06CB95F7D11359313F6B73098BD2E8E0E90EE2E02
B140968E654C36B5A9FA3AED1B8993160BFF7801196CA1A75EA3C15D7226E1AA
76D3FF37B8C3A84812A21F5C9B22F8E79726AC725467629C75389E5FF78A1AF3
ED066BEB1A0E53E8BD2459CDC6DED4F037BD4F97156AA0916B0CAEEB4BA30384
F37D2342C447F6EED98A9E608BCB9A5CA18CB41851766736F914ABE1D4870BF6
ACC89C51B820B14EFD941D5111E1D489385DA7067BA3D25EB9C268C8172C12C7
E66125C5B55089D72CBEE2CD43616AA037C948A78EA52C4B4806F0E23BB999C3
39DAC1C8B854B95912F68FF5AA018FE7AA4DE91137F21BC16EC691DA343A23AF
FEBC74CA0D90510525A14A2F1A36D2AD0D6FA7135B7A13F5B520DD8F15DDE610
2B7D265DF6B8548B2EA3488E49D31A36254D25E4C3A5CB11A52AC3B7F50939C2
4354D1206A7B10B9CDD352A290B6644B3CC72FEA5B6D18C1AE70A4EFE405DEE1
9C049A9149F24A5C76FD13EF3AAA5015859A4489FD485B1EE26B105DDB6D3645
E58F85F94AC5C0F975EBCC4AED79E594D96B72A68E408D83E8C88F9B720BF071
6DA2141EB182EF08299C3F968C1FC12CA053D2A3614C56B8962113D404B6649D
AA730334423B45C28D7F080FB4C053478ED3640CBA74376B83EBEDE07A92FC41
C9DCD8E901228EDC08DE2EA5A1FE0E21798B4C37BFB359BEB74CBA2C9A3295D1
9C3A6EC86535750907AF907F92EF9D27004C719AF9960DC969C27106AB16737B
62ADE4017B01C0BAAC64D102F77D5A2C6AE2820B60E080A43F586CFA93FDA6AC
883D99803CACC62B30E33AF3DDDAB05793F94B16E8D68063203D1F57812F82FC
94548938C6507B49395047ED40691BB9D41C04959830A831D8085C7729D49DB7
77470C85823F8054C993309AE86E3A57C184DD467DDC778AA701E7915EF21EEB
C230187B2C86A3D3AF738C7745DFADC77FFDC3BC0C38084B9E313CBEBB88DAF9
42206DA19050C2954229934308A29DB0478119BEBAED9DA80DC08CD2716C027C
73BD3FB6BE4748C4487109CB00D9C2287A13EE1DF36A85F2D313DB9C5FC7B046
B9BEDCAF4DD016016D64E22C145FBCAF383E562B9D07206598C560D389D73E18
0FB580DD38474BA967DEE29B286C544C515BFA6A00C76A24AF11A24C75125FAB
BC3F3EE12F1647AE2A1610F8A7E65D8DF8BBF860116730713342DA6A2AD17249
43E399879DBB8F654D505B528E98220733242AB59E0E0857B2A13CA0085AFF3A
CE790BE3A008091114EC68FB61020ACA24FC677A49FE6F550FD6D9C3584C23CD
A797D20175CA834D6C89ADA2A6F0CC2BEAC3FA0C97AEB30110C85E18F6AE9CB1
9BD7F51DA4E389D723EFF85E274543E36CAA95AC3BE5417F2609A30483E940B2
1E695D53514051A467706F5F4056107EAB0A17776047E541743D0EC6D45D7E46
1463AD8E7B4A3B4622021965C693F50BA63C8FA04FCF5FECC2A0121903D837D7
9AE5939B2B17AA92C38126EDE87D1AA16E9D6AD460281C4F7BA0953AD272F76F
93F6A907242497E1103EF219BAACC5C5484C8B04856E580BB091658242D706A6
53AF7B689920A96E061C3720C505712087832D0305F89EFDA7FDC486F9B29011
B3C4B93C985DB96244FF39A0C991AEDEB17D5F583609D1616125BA39B133D984
5545260BB4E7EE2119DDC763E66BF150B0A4BC1B5A82F3E811CAA5CD412837DB
8305AE62EE264A582B5F069BD3B5F106CE84B8CA1D8621A91538BEE4496660B0
26FF817603A4A98A574A116FD6555DD6C42BB5EDF4A11D4EDA1136742B915163
ACA4A82E19EDE1991735164871F1B9A42945F1C481644BE17AE1332C02A8F777
A42D902EFBD2780E1A26B68F7327C445A049AA72F624B2428F4CC5A1403F4D08
5A382B792058388D2CA8D6D79CA74ECA9E13003E82993CFCB36F7205EED9C581
60855F49E9867E15C3D8D0FF82B7E7FE1844AC1B59A13BB7849FCF870AD44EC4
6B24CF1F265D05CDB8D1BAAC8750862CDE4CB47310394C16DEA70AC1EE75E652
85C1D1CD7766449426E099DC41787496B0D94B2B6EC980C04072A94C55D8AB7A
CF3F74B237B7C3243998D1E1A37583DB6BEF51DA566AB3BE4B52429CECB5E319
F9CE5787A758B928E520F3FE4D9EA00C94DD45B54BD21B07C9DC0E086140E2A0
5A48E1CD89D76FAF5955A3E5CDE9F0DF1665628740BBF24055527F10F3B9F2AF
7BF094E2C50E63DAE6D6E757682F0ED63EF7E3608ED1743FBAA7E6CB1832A8CE
612E099555941884B6F5AA209CF5BCE3D052C93424A365E14739449E953EC0EE
23D7BEDF9C8D1E7352EF5F26EE1793739EFD75985D6D5AFDF3BB74C5917E9BDA
C0D9C070FA139DC387C749357CAC614E2E7F36A55E8A14F973E0DEBCED02A245
DA88A445A394CE805C46B4B618BBF315C2A2553FA16F0142F70530BF44C87EE2
61B80536B3BDDFCDEDCB54178F98CD550F323863097B1A8BEAD6832E5B859E75
A96D69F26C4B0D49C6A96A22585618AA6ADEC0F648D79366745F1AF1E7AECDD2
74505482C53017800A4CE46FDA863BB21F22F40BA93A9FC28EF7724BA8274D1E
214CBA8E7FA4E22C2B1CDE10229D9CA7426F041C524159D5CE1B2D82D6B60E6A
35EDFC207A2C36229278360F8147FA8BC19025E0CC649CB0CC5CD98A3F2BB68F
8D9C7CBD07274D55FC59EEE9AA4177F89F282D67679FBB62A2A3F8A8E767ACB7
3FCDD5E2D40CC6F3EF4209DBBB9B188D681A064F0E537E639345620BAFCE3D94
ADA2FE8960DF27D67636F1CE35FAE978516EC19B634F4195612D74533492428D
995676FCE47D6135C67E863789D0D9AF8A74651C1EE6DAEE1798F261E8E9F708
F67E20103F483D4B50045422B8819A07A8B746B4721674B1B8A957C5535EDD34
55528AD1F7F41B7B620BBDCBC62BF4195FC4AEA7CEF1D82B5619FAFAABB4B6F3
6E10A096A14426BDC69D2102160918F8C7EF9CAD6412EB5D95EB6D9E0D6FA90E
5516731748B6805C93BFB8D1D92E5ADFE25F892B33414A153D669BDC2FC634B9
1A6D1403F484EC1EC739251DDC6B122CE8EA895651229EC79FF27F8FA058AD4C
82EAF273A5B3FCFD9548A6EF3CF6F2D041DB6FA8FE7645806701711E015C815D
B1D2356233DCE4F583AD3A8B2AE494C27D0B5B8CFE1A797665A6DF528E570790
9AAA1220A1638001BEA42EDD43A2B771343B50D20AD6CE5489D478168841547C
A006DB0C3C6B7CE4DD3545E9B4C511B36AEB7BCF2EC050FB61D93F0031C72881
3153D4A8D135785A95D4619B72BF8726068D1CDF1C239E519684405B248BAD70
417B167AD59F956631E7636944ABAF7D61A7B6B420BCE51FDCD3944C72717621
E64A876E32B1905A258AEDDB3E56AC0763763A0A3A368592656ECBCA06718AE6
EF1D2FA33F35479B3F67368E87E8FC4F75D3A9C7FA8982E4F28CF3327B9AF9EA
F940458D547B5094AA2DB4CE7767BA63DB2DA3401892FD6DB377547CD194DC9C
D4231F945E2BE4BFFB0A74ED865C260BCE9045589C64DCA977E63725A1F3B4BA
9B4E6BBB00AAB820919750605BB70C5A1AB8B498C02F96FA7E07B887226725A4
2EDDCB30B8DD88FDC0571A73D4D80C1E7FF760506BBE4EB367D5938E523DC646
1B81A4A2826A79218D0DF07CC47684F8FC5491B30ECEA10EBEF7FAA71D9BA52B
AD7C6893A87CAFE883504BF3AF79AC934CD364922B4C6FFA37AC50214C2DE0E7
1F6C0BDDE492E8D8FD5AE9174E1010930727402CF2B3D4FBBD4EF4A7CEA8EB32
4107EC5D9AB4832F82EE4A67A191B938F8DE7D0F79BB25DB12787665F75D7951
C466DBC7BC0A39416298F3A772F4576D099EE7F21F41BDA58EAF80D31C0884A4
66C8D444A14DC62266FAB99265441D293574C687887110125CBE98345C5CAD51
C86F3EF9D56983BEB2C210F8910639BF40CE07951292BBE553497523D1A5884F
A700B3304790630D674AA1A76A2F1F23284FE0F43EDB9C152DF9C45092C47624
3B1FB2290D185475CD5C3D27B2D3FB3CC33A595FE3D8AF15CC4DD496FBEDBAAE
CBBB7E0ECAC2DFB68D08DE1EDD63C75E0F8B52C4AE9A4E954D01305A35A14F37
3EA18A66C9D81DAE2A75CCFA303A49970A3B757ED94F3FD9EADB35F876EA6532
5802E20C9CAB64104901B13F0AA00C3252F6AC502995074FB58ABA2BB556078C
A9AB0F883044550478CD66B163CD702DEEFD899721DA42ADAF9646FC3483CFD4
CFDE9E64080F81F8B074CF6866B44CB24A8BAB7A9F0F3E3B1F3192F6D636E3AD
2E8925CC2FCF673A1B66B8A4A2DFA3F801BD076D0CDC6B04C61CE4346EB976A2
F7D81FC1B85CFAC3E9A2B61B4E67E90507FE6C04CB528F17A3AB9100C40FCAA2
86C2AEE476C4FD401BA09D1AD9ECBF9FB24A1E5915665B1DB50CE95DEC418BF5
FC68EF98B5B25D698AE12E52BB991ED8C25D15CE7CD7C55020AE4ABED567AC56
BCD4172073F0F960337AA086EC00835EE0EF39F4C80C053969C3B6BBA509D3A4
AE251F80105682490925C630E7B17B0FB9809F918B7F15C62DF643CC99FA183A
102D4F39CF1651ACDFD47ED9337FF9EEA2EB1B91FCFB706F6844F8FCC4D4102D
4AC7434BB8D8CDF495C7D72B14C29517CD34A6A0E790815686B3E64CD1110467
A888399F3A8C5FBF02FFF0720FD534EA811369478C8802C224485C0EBBE84BEE
C437FE46DB05AA26C80257786AD90B1AE92F28E18DDDF5E8719608D0D5A75F48
CCF518DE8170D85E4ADD817882EA7C422E19D6CEE1F3374FDAA699D3A71F843D
E0256B1CA27F1DF29976E7762869E645E1A81389912EE4D022D1D831D091AEA9
EA7C8A12C77EC28A757A45E6700BB85D337B26D9839465F2C8D434D6B6094B16
1A9E25AE3178683C7AFD7278A259B22AC123E73201D531259B020BD87461A937
67687646F5B00EE304C9B17320AE9967D46552F948793299EEE63167684E143D
C92F9CB547230645F1C197FCE8F289C518DB10B49942AC8AD782845C12D96AC2
CE8B0AC524DF9C480D606503B4F8EF765A604B0E6FE09B99A6F106190FC58920
69223A79F1F1BBEA4DA9B4E9F1C834D6E557234BA6B3AC45D50CA5E5E6F6302E
AA468745E4BA6C01875F8BAB708C544C9532856A1F68E43F5EE63A435A3B2BBD
8B7A5EF35901BA553D5A90E02D55D376E0BC163BFBCF6D1602CA1864ED8B4D60
2D37746345F746EEB4C4EFFC56349AB20B8A6806570E2F01053A1B854F8C82AE
06E71CBF5CC4D3378739305F24AB8BB985D94A9DFDF2A603B03C805AABE1CE35
9166398E609CC8962F5A93C60E8B3BFB931D21E31A2537BB4F41696B7347F2D5
D6E797AE773F4F3D446A7506AD9EAE48329D3BE8F1E65E138A0FD110471C9964
746499B4C40B3ED42222CD4C6678E385BD6731061E22A21B65C5ADF6F60E8BF3
168AC5B065AC9A1E2C77455E38BAC599B91CF6C07E1E7A92906369D2FAB02C06
819866C8B359CC5A58361AEF0258277848F97160554DBAF74052B7CFB09F0846
D1B0BF8CC33B3387C88A4FDADB7B354EE9C47E64AB8FE48A53391059E44A2816
EED268B3A5587924D8B810C3184A3C3EAD5FAE92BC3A8E9139A1F3DB1CF4216D
99D09BDDE5DBC7F2E0DF8DBC804A7F49496FBE9A99AD17FE418FFC52DCEBB523
C8F7B9427E9484EFED14A3471A35E10B968B94A5FEB9C888DE886B0F8D7B31D6
0B047E1FFEACDA98F878D3468B63457D420FAD107281C64E455A8A933CD7A905
320A4437E9DEEB7FABAA13EEF76AD20689C2B334163B6B4C3E75AD98C1F880CE
B931574B0EEE0F1C53240B5FE5C4E4128E73158AA0655B59B6F4FB7FF84DC141
381F8C2EDF23892D1D324437C2F48187C2455585AE750D5468496CEDE5C2F09F
472CA55CC7C1DB234497959DFAB1C967F995DF0AA3F2C3AFEDFB7C6FBFBF24D6
4F4585CB40156F1090A47B31409B14E316364C4C23F1BF93B563BBA0A02B4675
3FC87ACDFDCF143C8959D23DC50E252049B603F0E58B1D61D9160E6C50BF6C94
6C55D2BE6FD59E23D65ED0611DFF361A71CE0740BD2BFFBA8C9F0DE63C23DFF2
E050E02C8994115CB396C3364DE83082B659DA7B2C51C6D7567DF00BF0E97FCC
21DAF4624AB904C8B23BA81D6029A0D19F1792C8B8DBB56C84529700E44F461D
FC821135430183FCA220D7D4C246FED03E55874951ABFDF6E1FF45443EC1C367
6BED527540DCB74B8FD199686B05DED5AB761E53462018526BD4126A1023A0FE
10A88A91CE2CAD05545927A91265F4C2B8F33EA631C09E227709C2E9763D78B5
8C16BC800530C30255775382D8D7E018BFF7AB90AF1BA3B729CF1C2DFFCA0C44
0B4006661F5457C2798556D6FEECC67CEA07942F72E04B910C72BF2322BCD1C8
4E3F5D549FF9ADE4D6E562822182BBBE4BCD9139C33172E22C97C5186C54E566
DBFB39721605E74BF74FCDEAD2E6B466FB6916E4C1B0F1D64E17698C3B766F7E
FE0719CFD554E21F0C92156F81F9D88BB922087A579BC293C452874A51859644
3E57EA5B462257A133651B1CDDDD80E206369423E42F66706A086E8BC7E9BB6D
A59D26839DC9FF198BEA4349D0F9F9A88BC742A7A6F7C338A0566F576ECA9ECE
023E9EA65021CD5BDAB27DF09607ADFD20708EFCF849A19487E3C2A252AF8F95
91B4B95A92ABEEEB9AC49BE31980108A96E319FE71DFC82729504A1D76351F7B
1738B0118C6226F15468BACA74CC5AD1734A1CA2754A52C0D60732D51404F1C9
8937DC87CB100E0EE673B0D48A4ED1B12C9A6426F640C42E3068C47CA671B674
01700475A29C0365311EB5AF9A0951FA7B5AD0B131DBC5DD1591EDBBED049530
6BF4307DA3F5ED7CBE141CC12DD70FCFBD843F2D4649774A97909D568DB78E8F
3A95856C728436952FD08225E8E013A766F2C0F11CCF734A9739E2D70206528D
68741CC2876782F8D42B1E29C4118142FA0D1FC56BFB80CE807288952094330B
B64C66FD60E39F8F0FA1691B35E315E10328D53C6C4BF6B8D8CFF61BDF5F3656
BE739DB66635E370C1BF537E45AE08FE3994B29161FDB44F1EAF1FBFDB8ED1A2
AC4F41CF039B9D50B21E30A82BB56CA27A94EF22AC72272E7640202706887F8B
925C682A55C23031E11ABF6C644FEAC4C53D1F75C0566D263F025EB551478F94
4668EF2E86E0720F98FB0DA22776179DEFAD4CE7C392E4BFBCDB920683F143F2
9DAE7DA52F64B4F6BD0EEF7A3F7C3C7033DE661FFE22F88575F86FEB25E86B01
3DE5EDEEBD19E549C8B432465545C85055B7BAF69300D7233F6FB66DF1E1FEFA
D35FB05CAA25183FC64340B2E354623ABE58509A951C7F25340B48732A53C912
E78463A32D7C2CD4ECF801F67054ED0C077965668565EAC9365A04E37B114BC2
1156100D01E74ADEAFC71BAD68F27C95BE7949DE451AFD2CC1270F787C7491D1
FFF7D87EF59BBC62D9AF2BFE0B83B6341EA0AD3201E8FB97EF3720CFD8CAC569
ED59C203F0BEE712D3ED76B6DB9D94EED0CBC2E8BC4BBAA44D5C8E1EE6BD58FE
79FCDC4284DC171D529E71770155474F4C5B76FD66BEDCA0EEA5E069F344E62F
9ED74F00BDD91AB138BDBD4B465378FA3B8E9990F354CF1C40BFF624957ECC4B
719C8F3A55275D6FEB3CA690462ED1F6897F799DA6CAE3D4C1CD0DC509AA232F
312648E37164171DDBC87BE4BDFDD52BDF2807E05B66E197F103AAD912A39E1C
6DF3B90DE5E2DC21BB924617A692D2D759F02BB0720A7B6315A1D3261F155E9D
5D4348BBCE973A57427C2D133DE441F20BC5AA34E2E66424F920A5869E1EBF88
6EF7F2609C3F13D1E0664C492A12FB45D2D89B2FCB03E926662DE7A8040A68E9
D202E2386A00F84BABDFB1D41A1CE883BE787E2069A2C0438D3FD1A491D44725
EF1BD483A54FD6C5EE244A1F305CF15DC1A6E8A09746A70E55C95BA3653D2B09
31D9BD14AB73F3DE8A27B1324968621B3DC06C0DE16584CE2D3EA86B80C67ADA
5BEA4EF9FD42D4E3A45EF2EFF4BF09C0C2F5B009238862C678D14CC3247D2B61
6D66EAB2344EE0D7480D05C63AD365DC344A39FA601A0DAD5B9F66C181B7A4AE
0674D9A29A3B71B73296776ED7DB88BE6701C57BD336351330107538EFDD7E50
5FC2133769110D29DEF190F9E95B6CDE6ADEE069C625C29B2291C42011BDD537
DDC43B5756D7F47B92D60034BD71D165DC065CC25926C8C2FA31CAE4E79403E6
9831385F90D2494048F1BF134061F00B428D5F89199214B0E2D72ECEEBF1B6AF
C5D437F593327685C713771C31079566A600F538D6C85F09EC001E45C1684D3A
D003EA8147C9ECF8D11B0974A293C0597C1627C6DE20E52C95FF7D1DAE60657F
909ED9C935BD4BACCFE3899C7539554F96C7583C90FD4BB9A5389BDC41090AEA
5CCD1886BE35F4100990122F7306E0C54557A019EE9B6F925072B86B7CA29FF6
4794BD76E4AE6483296797FCCFC74B11A0BBB1CD0270DBB7B9CB380168E28110
6AE9BF9DECD478D1FCF17175D20A525D438AE2096CA7560D6A2BDEF98C9408AD
CB25DB7B874A37C3503A725EFAA5180F2918838A662BD2523B07C1393B51AB1D
7DA2BA08B5CB4659DBC506E047A0C22C8735A29D2D792DC1255EC0751760CD72
6E3D94E98091F6DF894C77D966F734D32C482FA9151912CBA8FDD9C1B1401401
1A172D2143EC0EA79F90A1B9F04F7746425464E1B442F57E3E5A4E83121983A8
61634FBDA5EDB3E8379CA26C596BD68C9EF7E5DC7E7000B8659942B4C9F1E5B2
34F50A2B27185B0682F76DDC4E8E3484A3D07C22B6659DD48D867AC3D35917B1
E35E006498DEA8045CEA7BDF647C9543134408FE6D5368C9D477614C5C3C20F7
86DF04749BF41960C43A9443310F432155231414A47EA8744DB3FED3ACC8C4A7
15CB3C9A7288F5841940A6F0BA12E9A13441CBDA6405933E3DD5E0EB328676CF
576FF6ADCA91A39BA3FCE99DFB9235FFEFC102FA97D097A400BE2DF5E3A54DF1
71BE376014DD91A4C94CE065D5CC8B383B14BD4C9BE732167EEC5BC89A23CD98
4D6E2807511BB73A2CE7E54F499E7500C59314344A331297AD455118A0562760
38F713CC958681CBCEFA5235EB31E050C14F5593CAFE25D8254082
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE28698258
7F5F423DDB055E4F69C681B6F3BB759F07EF67A4F9E533EFC2F6FE3B5B787B47
63FAE23D9F224BFEF893B679D928FF569C2B2C2A5046F04B812AE899A5E2BCDC
B0AC286709A18943CE10FFD62B4BACCAF183331F284FA436B5D85E225A7923BB
70F764EE27EECAA9B911AD24C53DE5468A97F7C23EEFEC637627A3978DB446EA
10218BC0B75452B689EB00A2434CFEAB677A5F8C9E5A52F8069A8DA10EF3B536
079C4814BD61E171029FFFCDE91E45CD5474BA48287B9FBF5DD01C6568402407
D4F038E494F0BC5F5F2BB0B9AAE48E6DE89A8277426EFCB5EBDAE1E1B220C7A1
A9BBC51230D16A36310717CB0E9FD7FFAD74BC9291490F2B211FC56E8738531F
DEC9DE88F4DCF19BA3FD21540E82526CE9D79E8898AEE96CF0F7BDD9BFBB983A
8E8EFA2B22E221C4EEB1E11CDE63771A4ACDDE5013BD50BFB4BFACA9B27A6A8A
D62F39A21E7EC4FFF53778BA98C6F681D1E474BF6F5DE270234D42907F57A1D0
E9CC5DEA5B3058356D2EBD3AD27FCA940F7396A730380D09AAE4B8CBFCD8DB55
A1675D6098269708F78EE6976FA7A04BEED4ACAC7620A590FEF08530B7AA5394
051C9862F7758F5BDEC06BABBD8DCD76A0CF33F50C0C9CCE9458F063D0F2EB1E
245F7385B0791CF1D0C57C51AC6085CCA752F0AB01664657FE2ECE741F7FAA43
93EDE69991034454484370BD3E8754DAC525CD6C1BC7095B6466208184F861CB
D860E2DB6C0F965687311C73C73B307837CEDCD5FBCBEFC744C39B7CE7C86F3B
DA23448C5A33498E225CCA456008771EFD443FECC8006A66DD3D1444DB222AA3
D7302043884C961D34D37D66E187E567D8D9D9CD79EEA7E3459A7A103FBB21BE
9888EE330506B2217B1A007CB30D50AED7DC2BFEF51616E705C26C4AD450467E
64A62376B852A5037DD457E89AD3483AF9A2A703C47AC22AE5E318BEC4C15596
8114FC4792F54E3D32C02443BAD977344CF4FE5FBC1063DB5F8E4B5DFF58C670
65D8758750EC43B77F89E413AB6BFFE94AE1A089D29F8D7E7AE0260815D57BC5
DAE801D544D81D35D76FAA0F7244E7730E2C90ACD55C9CC8E4A7265EA33D48EC
B7F3B40328C4997B854E5FB1F8F024FA6F757AD4C4AA7050B1A174AF9185F6D9
F0DE379B95D008DCFEADBF8F3FBD685ABF0B7275160561CAA4247ED637605922
320C6FE91C2619767454EF864A649E9E216C1787F87122BB48E6875B44538AEA
38ACE7536F1897128E019E27BC60D30A0271C9B917AD9A19355296F809C015B9
147D2D8013185746558A2BA34066DDC7499BF034041330C2E9D74509189C7881
505FBEFF8EC11E91D061589BF1A09CC121FB9430E4EB1192494FDAEEBEC138D0
21757C547FABF4EF1F837B2852C33B6118AC941D3085B4DFA0A65C1D5C0CD905
66CA4E6E5686CA5BAE013E9BB0D8D614C2AD6E7EF03463DB5FA419EB659C9737
9BB0EB72113B2EECF25F33D88708A4DDE98FE98151BF26AA41FE8BB94D6C3F8E
7035E88134AD4FD8CAA5C41F99A7D46B2B4859D8CF7224A06396582629A1646D
57E58CA27E3DC16E3ACD735D40C29DCDCD5EC321F212C5D84093540A8ABA0BC1
64294A076933037C8D31212563D6A55D50F288CC7BF4390EEC6BB213FDFB55C5
508F6ED88552AF3A3E48B6DE4AB802395E7AE3941F845A4C78A93D07DCC76DC8
FE9D2180A068E0A13FFD73AE36AA12BC185C6B79A5C43B58CDA3D74F2AA2B37B
559C5CDE7972597DB39482BAB6175BBBC2FF18EC3E1E6E6C6FBABD577E8E8C8D
55AA712DFDDDD6392B6433AB68D2029149D86BD945D735C074CA04AEF50C2ED5
F9F22204E741903A2D26D5C6E6032FF50BE271B49BDCEF9F12487FFDA4435DBC
C542D75485C86CE80ADDEEB730EECAFE4B8A96333B8D0C1ABAEE487B4ECB1AE2
0A74059AAC9889825612F48F8DECE168F1DEDAC01735E50DC5E027AA2CF73DB8
301155C4ECB1F069372FA867873ADE088C3B92313C2F6F6C6010849A0C3859F9
A54C5820CA1533005BAFAA91EFE7E3E3B18D78126CC789DE132547B8B07E15FE
8283B2C17876B477AB765367F07F4423D5F2C5A4C54F8237664012840BD9CBE1
4410153ABACC63EC171B8CFD4100E6383485711F30FF1A7B9D9C94602DDFBC47
A35958CC8828C021FC922564FC7162C5E85B7CC03B235D9A319A3114DAF0E72C
54CE905679AD0A00F069B49EAE45E759974137073B79B0E234849129B67C8DD9
5C335E2C115CDD96F9293F6DC6AD5721C2BCE9034DA4AE14E6D6562D46A0AD4A
C8D19B81C2CF6DCAEE280FDC09EEA17E93959AED88B4618B40271F1BB98DE3D7
8FF057C9C982BF2A8FA66FBB86F28C860A26400C7A2AE7D140F20179BDA4A568
ECED16C4B08ABDEDBF9F60351715F0929478C419367873EC17C9D0BE7E7ADBFC
01342EC980EF7D43CB54F64A4BD31E1A9F903D2D566F31084B979D35ECBC2925
02456EBEBC3DBB22012B01FD57500E7EDFE6C234DAEBDE629E96DE1F2259EE70
9C52382C3F6A82F0946A79D5C7BC43366C0F65E7464BD97A5F4A75255546C445
BDC4F72B801E617A2C49A951A89FDD72EA12A83580A067A2F995DF6121FCCA92
3FBC99CC0BEDDF3D0B99812D03825959D06F8B38FC9C05590360474834B210C6
D0B292F903792F3B08591569704D06FA39177E1D931AC72A91CC711A81BF4800
921ABE95DC863CE9B2184E8D901D68A53BF4C512D87FB026DBB9C23134FF1659
481B6A1790BEE6E49B332A8A7CFD4EF5803D291D0D7F35FBD1E5DFFBBA66E7DE
F4251924BBE70AC2FBDCE36EA76427F3C61F21BEAE14DE711F6C3DB26AD36C44
C1E5144F62415CD95E4662F907530AE439E62DDD99AAF1BE95A9BFBF9FA37B42
90030EB9A66372504150D4F0FD21337926A33436B8EFF497CE9D8545CADA178F
DCBB2919E8DDFC1F43F39B67A8A2584E48AE94F979011CD87B51A45AAADA89C0
FEA98F44743C1342E237D8C664283960690CCA03D8DD94E2CF71E6198E954C09
6E3034681DF74E24AA632C98CA96BAD5C5CCBAD0D28BC7D939CDFA656E576071
BC498A83F82F6F6A59F50F607C62D2A6D43A6CFE3C89692623A1191AEDDAB1E7
5946B2753F84CF641688BCA40DDB85F3092CCDB081AECF6FDFC2C3ED4D7BC751
0652AF60AE4D07D3D12D68B547DA5D56C930984F07E053E587750803F12A5FC0
A7C259FA32AA6E94FBB876997BA89C010CE86D23BD56548036602FA29C254611
7EED22F16891D71DDCD6EF1D6825D0820146F220D7751EF32B94A40A40B068BD
37FA516B0A71D810E9A5039A5A5F81725C413BB66C62898F1390CDE49579F755
68A56C26039C641ECCE24E894E91EC15F1D20C71E8871B7F4BCF57B8080E03E1
020E0903091FE267EE880C637BD623A576A993E23F2A29B97ACE14A5BE5FC890
54C3FA88C50EB78E6AEF57A34012E968B03EFAAD3C7238859EE2A43F3AA7CF28
386CC0F8FDE8342745414DB772C3DDA877CDD59266FCDDA1032E6BB3DAC0F0A0
74B7087166DBD207AE801FE913419BB0306CA07DDDED4178438D6CF3F075BE1C
57F8E07F69816C7144B197D1B166FDF3FC41DFA56CB9602C3B5E169930A7844C
976FB6602607DEDFA7432D12D3DD0FB8F53496F001DEF462506ACEFE4A718D57
54A4EF9BB2A9452B79AB23C47FD28439732A54190D5480F8DC974FF742AF6E30
763CEF725F8A73F43A5AFBF985848058B71DC2C970170A50F80FF62A8EF65EA1
D46D843255F4D99EE73134B7E4876E02A3CE5831F2D593426C13949693CB1241
ECE2E649B4B61A84954E564328B1266EC78BDAD6F9296017DB1B5D8262EB521C
A10A645DB11A4A68243225C6AFE7144B087A255F1A8778DAEA587D539078C928
B8D36D2ADF2204015AB5C871DA45F06CF2B4ECFC21F31CC2977906DCAB47DE80
06B6B59F5B30AE3E4C9D103E45C0477833906F112A088FF5D4098C544DFFE4EF
A6E73C52C55CB9368D1610EDAD6BEAE8E3C35292BFBCBC69F5FCE006BA2F5424
8FAF4A54AA1C1B39C4BE0ABC7BE271139BDD0A87893F2F5CB39E534BEB9A3E24
D3B8B6D6352EAA04B6C093F596442A02B1C011573D187CB79295A476AF066954
059A54D5BDE1932942A81F5E28E232871D1316F9F5A08404A6623C3AC663FCB9
5B16F842324BD5BC0322A8313E81D7A4B25054F383DBD5AE8751AF65BC36C1ED
B568226F5EBCE8B58440B1DF91FFCA5FF1F1F0EBA676F43220CEC7B18FEA7A8C
0421754FA745E020D219531FADC4F45D0E7891A537B0045E51A9E45D457997A5
395847A7F8DC1638B4D22E719654E1141E3046358039589B3A5B6A427B2F03F0
FE2B2023F7FE96993C0ED7C767EBD0B289A94EC921B1790543CE07C651F3F25F
498D26AD7C4D12048C8AE02F2DA11FC82E034CA95A38C6C9D13063852045206F
AD0E152D62B8AF1584E2F1904D0EB14BFAC6CCBA1A0EB0BD8C1803221FC06FC2
9DE4C95042F9AED7C23662773F1D287DDA3410EF39D4E4BBCDCF9FC9608AB77D
019B471B064AB59401B65E2F717008BA40E1521514259AF1F5368A77DEC08170
AA9E2BA9C6A6A48FF317A7E6A96C4C4064925BD7EEB2CCA000253BC9A453D07F
861276BFFF4E13733B1561D2AEF6EB00F563E80897CE991A94062DE8037D2956
A536686CCAF1C946E602897A512E7D33848EDD682A25A4C9CE7C2C21EF69DBBC
4441B210BE9AE5C47275953B96ADF085FD667B2A013D1C8B828574B5EBFB8926
CEC9EF7423E8407F38E73F966052DD0BA48EFCD10EDED2A786B09582190677F3
C9B15CBC369CDCAA4915BF06468D67395E6DD3B392268F00E8F6F9C0C9047345
AA5EFA92BF96B84F2F53E897B55A175CB976B1BCB67FFFD67238B830D1E76EE7
A132811B5A6C3152B8D0AB2915FFDA958B2AAE383284B5970F122953B6AF6E92
D5FEA1447C624A4950345E48B6C0A40F27B2F2DCB757369072857C2D0C7BE3A1
603CAE7FE67EB34A3920BC0CCFC3BD4E86CFE778841AD6EDF8760DCF3893C9C7
C1917D587A1EF8DAF17D1589A8C20DFA069C107CAA8065CA2FC06A181C224993
5630AB20A7F43CE71C0CB23758397DF08491923895AC5AF882BF7CE064EA2427
ABD27E73B20ED410BC23B0458DE96F7C5BF5D3F79B549B84757B90CEB8135849
5081275C03923D1A6572BA20FC482A8738E8DB937D55396FE29E9953ABF2638E
A3CD878529E216479897B0946974F9350CAA152B6DC793C44EBAEF1D91669414
96E4928555F424F98633D376A1CB7C224F4916ECEC0865EF262F42381F8FA0BC
B70946C9F3E9F07A8E235234AD26F84E0C9EED811A1506CB81CD9E61525A012E
61C464F194D8F6E4A513ACD8FC7F4D323D89A0C19CAE0E2BB272FCD3B92D7AAE
421CEF86C49380C2D6EC0A44C3DC4B3045E72B04C7554B0B790FC3F2D116B5D4
324BB8BDB927410BC6C4E75E0CE1679E241AB397285019A8AE3F76B05BB121F0
EAFE9AB7B73A7D9EE31DE01758B0348BADA4599C9DD7034E722EAB63D1D5CA46
57AD80FE57212C5ED21633F57A5A00C888F47FEB8AD3A0CED06FB37D22C0349F
1BBE499202435DAF56E4B666B2F7D21F174FF6DC897036BD2D455A8BDF822A76
74BECCEFE07DFF1AE10C33EB2F1C423EAFE5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (mtiipractice2.dvi)
@start /Fa 135[44 60 44 46 32 33 33 44 46 42 46 69 23
44 1[23 46 42 25 37 46 37 46 42 9[85 6[57 2[76 3[30 2[54
57 63 2[62 1[39 4[23 42 42 1[42 42 42 42 42 42 2[23 28
3[32 32 20[42 5[46 46 48 11[{}49 83.022 /CMR10 rf /Fb
139[52 53 55 1[75 67 75 112 37 71 1[37 1[67 1[61 75 60
1[65 19[128 3[50 2[85 88 3[102 8[67 1[67 3[67 67 67 3[37
44[{}26 119.552 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1202 260 a Fb(Mo)t(c)l(k)44
b(Midterm)h(I)t(I)g(EEE)h(161)939 431 y(Applied)f(Electromagnetics,)i
(F)-11 b(all)46 b(2008)1417 684 y Fa(Instructor:)36 b(Dr.)h(Milica)27
b(Mark)n(o)n(vi)n(\023)-39 b(c)p -68 871 4134 12 v 0
TeXcolorgray 34 1113 a(1.)p 0 TeXcolorgray 41 w(Answ)n(er)27
b(the)h(follo)n(wing)e(questions:)p 0 TeXcolorgray 175
1279 a(\(a\))p 0 TeXcolorgray 42 w(What)i(is)f(the)h(fundamen)n(tal)g
(di\013erence)f(b)r(et)n(w)n(een)h(magnetic)f(and)g(electric)h(\014eld)
g(lines?)p 0 TeXcolorgray 34 1445 a(2.)p 0 TeXcolorgray
41 w(Find)g(the)g(magnetic)f(\014eld)h(of)g(a)f(\015at)h(strip)f(of)h
(curren)n(t)e(sho)n(wn)h(on)g(the)h(b)r(oard.)p 0 TeXcolorgray
34 1848 a(3.)p 0 TeXcolorgray 41 w(Find)g(the)g(inductance)g(of)f(the)h
(t)n(w)n(o-wire)e(transmission)h(line.)p 0 TeXcolorgray
34 2250 a(4.)p 0 TeXcolorgray 41 w(Example)g(6.9)g(b)r(o)r(ok)g(page)g
(282.)p 0 TeXcolorgray 34 2652 a(5.)p 0 TeXcolorgray
41 w(Problem)g(6.2)f(page)h(281)p 0 TeXcolorgray 1979
5741 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
