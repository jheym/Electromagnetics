%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96 Copyright 2007 Radical Eye Software
%%Title: mtiipractice.dvi
%%CreationDate: Tue Nov 04 12:59:30 2008
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMBX12 CMR10 CMMI10 CMR7
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o mtiipractice.ps mtiipractice.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2008.11.04:1259
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4DE3E3F6222F
7A252B780C86447859579C68FE065411FD8ADADF4FC7DE51F8FD675D89D8660B
E7C97553F2D04925B72675324E1F1812AAA3BD881E968F16EDE2BDEC29955667
9E28B8AFCDC4E73FC735123B91F110188E4158D075070E40460602F27C12ADA7
A45B6318E24F206E2CA486BC1A90C9AD86B84CA04B57354721DDC0A60E6C3A73
429B900B12A14AB1A57500F5DA0A649E0E3899029331E48ADCE3457B064F4D4F
D4C9D6AA67E2CC75B822A090EB31C4E78B3FFA9F9F3DB10177C5AB6561041870
015CF27E4FDA0F155F1642F2BD0D4CBE322B29DA184C025DDF95869B5218A24C
90802F8C9FC82FFED0A466A364C162DDF246F203E46D650355B4C10EDE176886
2474B6FB50199C2F24CF819F44949E8DED68D4167E6657E434923FB5500BD442
56A0B82C3B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /omega put
dup 60 /less put
dup 61 /slash put
dup 66 /B put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 122 /z put
dup 126 /vector put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
95601766758F8565573052252FE0596A202DE790EEDFC0619CC87DFEC8388155
ED2E5B61766AE9AB6988632378CF6A3F864B75E2091E401539571D36BC35BED0
B8AD305BF8D122A2C89AD506AEF3025ED34B476BE0B9CCD89AF186B48033AAA8
5FD09DF6C87CA4B57ED1E7B9A2CD772403C2EB31663B1048C38F934B508BAEB6
D2E13D75877FE0F056D7EC1C6215F98809970EB9AFEDFA2BAADC1096C94D8004
811FB464CCEAC027074C4E22D1A53896C11B0B01A020A100D104100156DE331D
869B6296CEC1B52872D0CD594BDF666E8C9E92D59F07CB9FB084341594062310
629F85557C0100C72ED89BEE1FAC16519BD9BD4A7871787166B6A3618EC02527
3970A2D6D869F252176503F76E811AA44BCC90861099E8AE739204A97C616EA6
A3CD8A644DE77005483F71BEC4036F6F09063AF41740F7FB890B9CBB87DCF110
C2ED6501405030BC78DDFC6DF22B9EFFA48D0CD786AF5DFAF598ACC5B7711776
0B74D2D83078CB42DC8DCAC0591F1B0F123DDD3C8DE64BAEA63D6B1B83CB6241
6F85ADE9EFD82BCC71082C24A1115EC816EDE904D31BA4C3080261AD20667458
679A972653EED785194F1EA516404D40798DBEDD06753184E6206EF0C8E7DF5A
C5BD7D5FC15041BFAE32CB7555F0B80646AF648FCDA801ADBE83691C59AF402E
98F824255969EB1C3B8D77B6EAEE3649576B61BA5D6D33413081F9FA36157EB1
54D5A5FC49CF9B17E88E846153528D93F7D52403B14FD59CE365085247BF106F
7C3C0B4A47DFA386A94DC38C112C6A7195FEAD2C055350C8CD420642D9181D24
73A812ABDD23F02E4803D93BB0561249BF7CCFE4F14A9B7A1267B2738413BE85
DFE4647E082E2AAF6AEA9054FA022E579BAC5A7DFA4273B1E83FABD9A09F9A0D
E9D00F56972B21C90AA8A06A2EAD4F0A7E7D1DC6E5656C77518E0D99B91B2272
0B4B08F5AB15DA233FCC5CACB905B8D7E76589B36E89D344425446CD567F37B9
916D89B1BD229EEF5F15376442911BC62A1CA859D070FEDBC4801C4C4012D2EB
850E556D11C58189E2670A6D571310C37531C1DC33BDD04ED254C9AA3953C4D4
8E1255E18B4B178A05201578E8930E4BBAD2776CADC1609E6F958A05BD58F667
34CFACE077EA9C9E3A88B85D42442CD72D98EB7E37AE4509E9226F2513DE4695
7ECECB316B1D757D0A7D0D9C903C8EA9E707DFBD934A9BB8824C59C6661EB34F
15E60C0201356F9457D7FDE8FE2D713F7AD7EA264C9933D5BF07459ACA6E13F5
9254C8F138B523120065E9E9AE9EEDD5652F2CC8BD7CA93AF1E258B50CD36E07
B01FC1131484DD981B715B7204660FEFB6E5EED830612DDC94CDB7C8DDA390FD
30CD25331DFCCEBF45732979C7F17B13479283437CB12FAD0E575C138128EA83
09B4D8104D276437301CCAFA3AE861C11CB3BEFCE8690224AEDF2D2F3B94D0D5
11008B5A04D38A46425895E60668134C22A7E4717746454209E8EF4169569BF4
ECBFABF19EA6799307FCB149E59A2C7A8378806EE6BD79683E324C2CCED63BD6
7A9A8EFAF181CD0EBE7719D1C41D3EA8D9316DD2247FBAB879C83B08CB6AC284
14E9B2A3482E81AE8A14A09D30C0C5E3E3762329EFBC84B57FE3E544FE08A191
83049389443F3C00329B22EC1CEFEEDE7B84CC4AE25865F8889752C26C9F4CD6
EC5FA7AB935D0AEB14C77C154537B05DB7047830FB51AA6596D24280EFB446CA
1176047445955D7E438C4EA138D64FB2928EEACAEE591F6D681A7F4F97F6C8DE
C34C829A767D48FDAE6932B7C43DE6ECAD6FECC70592F1DBDEE9222BA902F87B
D4999AB87635F245448E37B92AA3A070C3CE5F4CB0EF35DB7DB7F93F87091475
9068BFCCD217CAE77124F098A9FE7F573DCDA0B9FD79A0BCDB3A9850177EF0AC
1251C819F2096D3E436DFB5C5114536D240DDD3F6C5CE58FCE94F6846486D5EA
0B8EDDE3F97A93DBE82CFEA4AC5B71FA98170CCD0DE83AA8227EDDFF1DFE42C7
7A75D28AFB06A6E171E07BF02405FCAE157E08476ED6BF5AE0FE654056FD8A4B
123B097BA8B0A68060F6B5F2D67A3B3232CFE0A007A41B249D1B665220DCDAB8
3B2731D6889E5DAFA5445C48E12A7A5FF4CB868145DC5FCFCAD3EFDB07CFDDAE
C114FB8AD454CDBD81A5D1F7A6D83691DDB5181A2D6CDB66D28DECBB63632B58
442686FA10A7C62425BCD153F29F5F942466800CC907D5E23EF9D99048BF6819
5C75D0CF5DA189536A7B21448717012875D39DE35C5627AF1FD004B338B9C1DC
5370C1551BA58021E02D0139A23591724DE7542BC5EB0E901855971E590B6EEA
4DFA836CD4A49F7786A568455B16F69C45256C53B211504731EDADF0892650B6
2C24A80662232397FAC374DDFF571B2842165B6582C10EC6745C7D3EDE586068
5588DD1F9E07422DC0080A38942C591BBE14E81C2E45DAF125E34064FFA50906
05233F3DD4293C4DCCCB667D268082B52D036936656B7AD5FFB96B9AEB58E26B
181F5726AA742643F5D084D5CCFDFC40E34E2D6027396581B3463FA7331C7540
741342E87027FC10F56BDEAACA7E16D695C3585E76ED1BEA531914863C42EF0E
310948D98BD7022D6E99B4EA2629A286B5A139910CB164380D004F123AD3F86B
AAAF6ECB88B8F01558DB12E7A6FFF5156D8F0884D2B521988BC36C1E1355AD9B
5EC0DD094D0FA2F09E5EA34208F9B9247A3EC5DF34B758738D4EA0F764027121
4AE60C709E053D275338B705E2BF5ECEBB09EDD6EB84B4A47B5BC5C78532E3FB
B3826AACB76D74B6ADFAF2DC8C5DCC4B76F4A7DF61C874D128EED536870146CD
EB9866096FC17C011421BE0890D539D4FA8EFE40D45A349D9B9ED2DE1D20D775
435A568B33E99EA68ED2025AF2C83D31697038839A5B753735A88CE8C5976200
441DC48B9F09148C79D56B7EC49A22C32DD472AD3A0D36AE8071EB6E5EF6F9E3
08FD65BFF67ADE266DACAA1F439259E9BB83E6647D4CB6EBD4A8E4CBFF10CC2D
23C2E57F4C441C6B5A9BABC4088A518B1C7D110D662D7954E66B601DE99D9D40
9E34D5B80059AA132B1616D4F2618F7812E0A9B3C3144A3B744BEA5522322AAC
1AC7AF229CD0D0643D73A6138C8861E9ECE2BA17356C09B7C5C7567B1FB2070F
81C713E1635854836A6E0899018D487FD2F319C9233A55E336D74CC53300FF9F
A15C291454059B79C83E24EDD8B9912BF4C0217B46DEEF8BBA3993A57518F74C
FAEA75901C9DB7B0D16FD3B7145631479138CD976EBC4FC2CCDCFCDC078A95F5
225358B71E6BC484D8D2FB6B86B94508D3927FD33838246F9A0B2B3960887F1B
1CFF3714DC397C37E6151B4160FBE97657CC820F8FAE08BBF212F45757C8D0EC
EF01BED344CDB2A026FA7A5B67B5D3DEDD263907FC63F315D746C83CBECB0E0D
BFF222F221930D49B1687F1D11074306CBA96DB95DDF0424A93D5F5BF2CFDBCA
2EC4F17438F2C859
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 19 /acute put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AEBE7F8967630A40E00F8C1
3054F2BE2768682E50D0B43E3CE3897D9EE7257E77F9894CD4395C21585D16F8
AEFE05217ED4F78C31FD635A00CE5D0DFC7B0A6BF9444B62C836087731D6D205
24A45B3C8D80983A67377EBBEE171DE0B4A21368F9B83AF7CB286D8389785E93
B11277C65D4D789AF99B1D7A3032947A51DFABA0DA3B94D8D4205BE243264127
474D97F3572385018D62ED4B1A399B8E4AED8D7C329F109DBE3015A727DD70ED
6DE4DB326C4323F499565020467A2F2E305D6C518AC9B545FBE586BE8BBFE8B5
F5379D8FCF35704E98A3DAE5B62BD96E0D7028A6D64142BA9D8750E8D29D0734
813948D3382241D826005F61EB3A50049463890C243958322ED0E914121C4019
1A2E4514FEB8B0DCFBB99FFA480FF4A0ED116DE8A806A98D112379C8DE23C75A
F530BBACF11DEBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E2B4AD782AAD
5BC54327ABB731AC87BCD3AFBA75DAF70AC25471C19ED3B2D16493293F09EA31
1F492952605830384BB8B8E618DAC75646F9300D88C3922A90B1A6567A790862
A40920B2B11ADF149CA1C16C6FBA8AED582215711E83AAC8B9717C54FA4EF4D9
9D07A3D1D7A9BF3B8B1894192A5152DB5989F58ADA791282032FBD321BDE2254
7835848FD3DFAED58A301CFE49590AA8CF8035A02EC0D101EBFDA2EF3E2FBBC0
EE740CD58502E301B7F86166B478E8B8BB033AD8561C022EA963499785DE3DEF
B109D040873BAC1435C7A68AA72F30E77A91862AD5861D01EAD8181A8BAF0285
DF026CD5D9E070940F0E9286C366E1F387AE1ADF7434BD30D6424C17BB0AC7A9
DBCD4F4BF670E3642DFDC21AC8A0BD6F3676B22DF521DC4EA11FD200418A3553
5614C1916D879D523F796E0B313B90A80E29217CCE84EC6BB498F39BF6D72D19
969BBF535D8F8DBBA4B91868D2C877ED5AFAC1C2C4BBCE89EBE93512D7FBA309
3294B70DD09035152E45EB6431A8BD7053C4BC2D25A6F5EC9E2780648DB1BD91
46A6233CC19E49C4DB1B52351804FD04284AC714397889B8D68E627736C7F69A
FC502C98B3DBA3961FE33CC1F54DC3B1F9705DF7BD62E665C2BEF60FC2C975CC
1CA231B5538BCC0BA1707EDAD67E6DBBCA9159D771ACD9BD41F364805E96A2AF
D1E7937FD6094EC7065BED42300A51B3DFAE49D390431E3EB95EBD6DB6268CE8
BAF3036CE7AB4E83507C35041EBDC5429568588C5A07E8DF854339F8DC700135
F27B77EEF17CF3198967C70EC22A11E165EEBD8A9DC3B04D1A39958568DC7EE7
A6B87272D33EADD556C3B7A20AEA6132CFF88E6F366B9E9105865706F4E3CA9C
FE915EC81B9C5368FE6C2B11DAE7F4EAD809127C64F53E9AC068F391F2CD7CD6
7C86120725731CA4E4070ACABE5E12C139567819AE763246F6119FAE90678FC7
608EEC113C7861296DA16090B52E207704434D4C3171379682C5935E9D544348
332A196355B0D612C40721F20026FD8300C378B97276EAF5940D5397A4F87111
C437C96BE394D3975098C7BE044F7A2748550014DA825C45D2C1257ACA135241
0C7A469A2EC73E516EDF444171BCCEA1DD5DEFC5609535A6B338DE3B8412C54B
8036A3173423D17634BD773D61BADFD89183FB347FA191C08B6E9A73943CB514
2A6897B8CC881E695B1F0E88B795CEE7FDBA7D2A7F0D3223FB5E310AE364B074
E2397197C0A050D267485F642586EB3F7412FDBF8AE6B5C0775A15550E9E5C1F
1FDCC69A6752A6B712CE409FD05E19AA42BE1269667EABDCF3CFE0CA96729CE0
A0F0DCB4939F357A06542A201C913A05FED7E04A3580C00AB60B60153BF8E7D4
2B5AD00EE5A80B3D0084EB82BB36A5A9C577675477A896835B46A893E1DA3AA9
96DBD15045C3310F571E8D97C928B69E7DBF6E727EE545B13BBB153EF4DAA0B3
B8BF7AC74ADB54DCD8719C879185D82D4C19D5906F442A2275BD584816690FDF
98CF000AC328F3F74EA34C082952C86C9124E9E0E21A4A74EFBE3BB3113E3538
0FA1A9E53CC918DAFFC7E93EBF933741CB4BC3498D84B3ABDAB9B94B20710B2D
1512F0317449635736685FD4065D27D217209A196D7B9D4AAE568965BFD7E9FF
990F378C22C44A74F822BF486A6BECFF2C8AE8E6EB7006F8754B35084DFF6612
D04F093EC79B6538BD71CE56BCEC1AFB1D24F9154B30E3F926898070377E18FF
194D59683CA3C8198B61BC451A3B5079368C51043579F4703606804861496076
EEDFB43057794495CAB8246757B14C9B5C46D79D6419B2C8F9C33E90D298B611
3C392445D48EFEEDC38AA09E6B63CE9D033C05A96CDAA38AD60A91CF722068DD
B9DEF74320B2525805D0CE1ECE5068FCF3D5BD42EA4DE389590D5A9EE77B8FD7
C0949642C76D0383F7012BBFA9BCAA0CBFE315B30FDB79E0A746292ADC2A1B50
B8B640BEB139E058D32E1E01A62396FF97D15A980EA9759280788AB06143F5F2
72CB6890D96E2C3E5B56954EE4A0C9BCF670FDAAE2DA95D1CAE1F1E6F37FFF30
EC15C114B7A0E84F4F6B4A856152760ADC756FF8A1C6FD153C1215FFB58B3A39
21D9FC04F4A3B4EB373AC8431EB1FC5D3E82B36A06040F955F9001F9E7C590BB
F99A5C276AB4331FE7AF7263770470B891C6472201DED5F8E8F7BFC191FE59E7
169952B027C5233F60DFB70E8ADFFB5A5787EF1611EB8A6501B906E46B5A803C
63A0D35F507D70CCDE2FE6DED7CBE5C54A7CB0F8400F7FCDE761A0C9B535907F
610B030DA9D738A1D9B5E11BA662679500B7ED788B04F60BE9DC95BBB3CBF812
E777F195912F675679B9D83928B9A03C337714AAA5D0516DB34268FBA38C3669
84B871F72A10DE6C007F3D6300F623FBB4905C6AD7C5AE64D7E9CE02CB331BA3
597CAA5C41A80AD9097624CEEBA695ECCCE194D7F5D964D8772C16C0F188B308
C1B8FE5823087388377604B5AF3EE2FC16620CD464A86D0E2DB789B7569FDC1F
9525735559B2E58243D01AF4C650FD090CE09B7490F93298D700E364C9EA0098
A574612EDE7E4F30CE419F26C5EE9ED7A9ED50F976AB6CAD78E1E0ABB0E91659
EE21808CC58EB6E02B2E5FE959A8D7BE5FFFA32A2819A103F5DCE61721885A5F
F822C9F6557E42EEA18CF66EFDCBF557F31478531C4EF93535635FEA4F7D4DD4
A8BD625680D337220517B4546B5FEDAE3379A06A5C5A865E62AFDF61E5693A4B
73C237A22B73D69BB0C3E770FD20C841C077F543197B639C50F323756BAD83F9
9AFE27F035F73028BD7624329E60F803B219121E0970A578476AF37C5A631FF8
CD242F728061570EE98C099A2DD42F5ABC459160F39A512F2925FB8615A198CC
7BFA07BD582C261247AF58A34CD699BAE0B5294114715909DD0CC8CE3B5DD475
81C23BE9B11074993562DEAF06DEA6EDFD1BAD7D73A05B88DD4621ADEA8758A8
FF6EF20D15D2E7DE2FC66DD8822E1EA0A781EF6D833432ADC91F8DB633B45781
A76B1AAD6AE255A96F1728BA5C7CF88B6B38C14ED23FC988EC5002CBC18458AE
DBF34EAA61BAED78ACC9D048808E1BF58EBCF5A6CBA1F0519039E29C526A4532
155C2BA045144CD627FA253B5F38A140700DB5CA8F71F73F7C214A117207C2FF
C60AFB329E0F37EA89515191EDCCEBA1207B8D6D64C2CA28B4ABA8016860BAA6
5B0B679C9B41A4C6EC78B19F1333ED69404B4EF0DC9BB48BD9BB7A45BDE9F14A
DDB258CAADE6B3DF9EBB61D02ED755C31CCECC8240C4232803AD47510FD465E6
81F7BB527A4B17D62B897794F599821D51CEF3AE2A1A8921B5EFF5C2A8AC9DB7
A2677664361E34ABECD5A97494780C2079860DA4FE30513B2B17365144220FF1
D1BD873242D4124890C61FC1B5A2B95D6C49AF58915F7BE05BA749949B769BCA
89F25E9443E1A7DB34BAC54806498C712EDE819B8F695F2E1726BBE2314FCD38
A66D1E4FC436F0B11F5A4BEDB6D72145DA2B97143186BAE797A325928390EC70
63BF8B9C18114D453076634FD15F1DCA8FC2326AC5482625DEC9A3829421360B
88D58C22970B22BD68841ADEED4478FE530F543D216CCBA9CB80D00BEE519C64
B241AFCA489A3A27ADC22FE8DD260378F52200A20FFCEBA6485C11F62F00C49E
10093F3C41A4FB022D66347EC3C21B61FED5713867FE832E3CEDE47AF0758E57
8F31F5AE8283B5561136973954558213D8F5E8EC62945177474F96F2DB4C9871
BD6C62FB7AD150BB76A63CA4A42C0954D4CB876E689FED140788BD5CADDF03E9
3597E80B2C25CB540EC2600310F60E99055958D1E90016BDA3ED71C7A2CB246F
FF283E1D65BA2DA0E31353D651178DEE25693A2465EF6370F1AEA5CE1CE1119B
19619BC107F8BAE8FDC22FC5C26D4ABCC8DFDECFAA86A6E632E714CD21A3A3D5
101B22D04ECD8917962AE7D1034F1654C774DC700021279A5BF606986838168C
2E219AEBFED8BC3CFA2377899E6A779D7AF78A033B633B4361183CB803EDF5AC
248068B9AADC8F29FACD2D43C0CBAF9B4F5DF252BB5068ECC362C21BA3F45B0D
D0E8FC0C29EAA6B2A8626F01D5C44D9230680D76A26745D2AAFE492C03ABB8BA
1B241FD8E565E9FFE9238E7F09A9AABF0231991239E4B18EE8139AD6B0B6B4E6
FFE80217169C1F26277BE867B8174EF8B76015D055FCEFA66B1DDCAC2D6783CE
548DAFEBADE2FD290994E2089F350F72C1282818889E21EFF84C51EB46874D9E
EF22E507AADB7D63EBFAEE4F6A4B121532934E1D5E0BAC128B7D6D74B55130F6
6D8E70D694F191FA6029941B7E7D9277C4E6065C0575211E69C4A71A60ABB727
0E5E2B5DF5AF537F1F04852AE58BB8D936585FF89EA0D7B225C3F98C6C49C6BC
BE34EE266ECF934AB1FACB06AB963B03AC9848E2F711B3DBAB9C208C4FAE1042
E005C8BA7FB11DCE75C8FCEFBDE531E5F157BFE006BE465D7655D5D16F041397
62EBC9D7E85A22B7F9BB4BAC08033086B572B3946E9EC063E5B886925F630C4F
FEACCEF3BFF1B52499AB0E721AC57F796E2ACA0C4644536646E135E229FCE30D
49F2E5436A6D2A05F6874EFCC108488D76BCC8C572123E65BF56CB8396F77021
9E2911F46DF5E3DD93041B9594071B7E719CC359AD52DA3F70589B72567A0478
5AA9B603439B1CCDB847EEA8A7CDE05C88C4EB9E4266ACCB6CDFAEE13897ED3C
B24AAFAEAAA2F541DA539ABB4A83E83D18084CFDF807E6AFF16EA9CD54B62E4C
10BED129F91EE1B76B978153806AE7993206DECDF184F816FB5C732DC3C516F5
B7B7B66CEF512B2390E87DB3F6787E1303883B5E8CC4632E57BDBC610CA7F6E8
444CDD5D009E1B4E6FA6684F7C4AD589C695251940A22EB8195F9F8FA02D45AD
71516EC73D938757EE1627CE234F7D67DE5396DCD8C4FD7D8354AAA22C8BF024
31D1758E102E415A4FC34F5D66CB691B7018C26A974054883E66CDB513623EFD
EC6010F8BE4C263FC1BBED5461B01B92EBF74B455BF04653A1209BBDE677ECCA
4822B33A39E4CB12B80410F20D87AD7E3DE2C30A105FD1E92E346AD20FD6FAD3
AE8C9C773F2BB6707E4E5979BD04BC9C8CDEE9CEB5A7D7A75FE433A11187854E
78875EEC6D77908D0BDE0B2EE0FE90CE0F126B9DCBB19A3616BE5CA9DEA4AA54
5B30F5FC7C030C251D8BC251A9CCC3455430F641695309BDAA3768EE059B1B57
4EEF801505A0A477D4652369BE94531D42AB090299ADD5429B5F7DDC2F9720D7
F4AE73B53B3FC78F0AE114DC46209C7CE08C9000371BED4999176872AD29EAF1
E9431709C32DC35E0EB4C1898929C9E66E513DB924EA555AB3D1A46A489AEB1F
033322F397F046286C99C089E3EC3158A436E997EDF1493A2353C954668F5B89
544A0BECFB27885BC0CC58570F5CF905DC64F2AF3FABB5B7AB71F051781FD46E
73513D4525D5D8FF029557FFF916A817D251A6CC06EADA9092C1CBB6DE31C66B
0F073B6C4BD26E4950B5FFC0BF5C2145F733D5C58B46148F92837B345BBBD990
A50E737150724924FFEBDDE2FCC6DF670918DF9A3643471A88C57644D3812B3D
7F1A2B220A4DA87D0C14E7D8F8930CE7FB31D61BC9E60C86A39CB2FDC06B837E
BCBE82197F14AB1CEA3F06CBA5295C16B4EF51A0A16B59ECA3A8A21B2B30455B
DCE5ED98515E4A3B3AD28AD24C6AF950229AF897E738368466B376110BA4BD29
7162B3CC656CA6C54CDF0AD7F98C646A7BDD48B04726E6834FC95B8836C1E03D
661FC174CAE9F905FEA69A8E75C71393E0BCC6434B7B00530AD777220CCF7C28
50A8BD612774420363535D8DC5FF127371F1EA9BB6B4E92C7BA3990F62E9AE2F
3C7DA8B9E26D0316894C4CFA3E41DF1445B6C1AC7EDE554CC7BC67676DCEA2E8
E8BEAFC173BFB2F85E924D8D0190D7ADABA2425E4EAE8A8A1EC6E6FDCDAD6602
A9004BADC557177842A3A2A9B7D4E306080ACC5B7C5A6CA012187C3EB91FD64B
98D80938C91FB2EF83C480AB3EE9229E16235B10D0414D31A7E483656B710E32
853A5C084B23A26E770FCF21BD5019316A7D0A70E6D95B93279DC965D1FA9313
58F68BE43A58F9C1F6FABEE1FF36C05D5EFEF2CAE83CE0E2F8324238FBEC745A
C6D7ABBDA49257D02D039D7E8EBCA1CE794EEDC31E77A764237BC77F797BC61C
5E31C9330DDD5A179E733D50BD711FD6352A911C622F98BD0B5E6933FA438CA4
E725B90D3DD9333F36242DDF9BC12CBC4067F699C81E5E574ABF48EAAA6FE737
70CEC19047B5A4BC42EE7CD3C08F30AC5731FE975479BB11D9466787F68576C5
96E373FCF5003F4E525B74DB42DED8370C704438E679471D994EB9872519D8FA
E2DAB21A2050A47F7435BA9E7D72FC2813C131A9A1D5F4C2489EA8A7205234A6
55F0736DE6251FB21C94EEA21EAEAE28B0A6C9E4FAF5053E2818DF5F5A52989D
D4297849C42D608501366BAF23C73DC05DBF72412DA1E7CA3158FAF3640F9489
0F64CEE112DD4DBA56B7C65EFA570D0A1C214EB9F754D613F73A316A51175ABD
8720BBE03BEAA6447645782612D0700EA39FAAE5BF1C1E638C31C97E5EE7F544
1B83AD64673E42646E6246B6CC7922C74083A072700ADD66465D191140764912
AB8F71EBDB33E9C4399FBC05CE61E6597503395FBBB9222CF14FE3A124040269
8027D4007C03692A75C91FA542E93EFCC761DB88255D065F67187D3086333081
59C8A15AF4DBD0B80AF0156A182C21AB6BEAA4D465000FDBF6C33CD6F66970AC
A00884BC8E43CFD96624DCD630D20901C3E7C0F28E3CA76EB2E0DC3C112958DF
228AE95E77EE1CF4506776823CF184B6900F7D4A040E7619F8A66517E79E6EA6
3858AC5EC7080494E2A24175D55288BDC550531D4A18EB88BF3EA792CF951C09
1CE54D410851D111AA1A4DA0EE81CAE398678811B5D8FC314B9498A561D2AF3E
A30FFBCC645F53684598B20E9FC5A2BDEC62C40DD06B7C9E966CE3860D121143
E753D0653D530196587990A921D02BD74B5F2A1EF6E07C6B3E3875BEB4BE2F57
29D319EAF6B23B42FC85772A2F116C0E4EB91554A6E7DDF1831C793D396F47C2
633F73A2D62B3687802254132C09AAC759C39A5E9C72305B3FD9F9C7469C252A
9FB0FAFE8BD6C75C9AA6978CBDDE7DE5327FBCE34FEEE5668A67B0E0AF3E647B
51710467339A07E5B3B4FFF7085B4EEB52152BDE0CEE82FD1BB833DF920F333F
3A541A14F33A45C9520CD46890FBAD7F59687AE492101BE1D2369F16209D880E
F0193A2EA7F436E79B83BB2D2188FA937B0CF8C7FA13914953449FEE5A0CC0D6
4DFFE59FB5BF78CCD20F0C7670929F9EB71E01A58A3F0D519BBE362C05E79D65
07D9E5C1C867E44E0EE3E029E11834130876A6A7310B100C7D6C45B1CAC6102D
234F9FF29B3ADF4B94FED6E07E952C2F17B1E745F65F91F0C33BF2A43FDDEDAF
C1D8CF234565AD250EC4ABEF806A4C0292F4BBFFA642773E07C919F260DE1F5E
02C9460C454611B83201F74D1D779DED239D1E811245CF6EC745AA206CA990D4
D61A971D97F679EEA75C6636524094A2040C95C1B15961440C7841CAF39E0345
291A4257BFC547974AA9DC2C784809500A6C995A052BACBB4DAAE6A9035EFAB4
5B0324686E122439C2F18B8BF2F5B89C55643635CC63F187CCEBF39198A7B181
AE45687489ECC1DD1A683080D7365A40703793336A367FD7DDEBE73759149E1C
32581C104E88BE6BDD49D3E38D2B10F6E56EB0C3EA710C51FB4C2A48A70DAF89
F853C769A3716A5D8AA33709FC72D523918DF7F75D33137389ACB1F739F1FED9
FFB3E8F2629BC6A9D59720CF563B97DED1A473AA97EF2299C172C8CF2CA8B9E0
BD8FF1BDE93401A556878809F325CBE003D605FBFF3B045D6F93E287BB325755
7F1F0C2F30CDE821E2FBD45BE40F4F94060FD6C9C6F8ACF92360028CFCA97AB2
99811CF772B96F1825614E743F3B27C3A87F0527E3BFEE680FD0F62F42AD61B2
B8A2FB7C69BEB028D24444D1C63926BFA5F65AC308D8B5633E9F0701E5760A8E
06E115B7730E12204A4780B52B9DE2A23CC6597D8D39BB3F340CD82868E328BE
CE111C58069854C55F8C8640499796D88AF95FAD742577721F609CF7ADBCBBDF
9A22B7684FC67F3B3C2E2D28B113B0EB218D81EE1005A027EF18BDAEB920FDA8
22ACA3674CCE2AE7453478FB3303160BB53939016873054AFE61B4F88CB4B1B2
F657878248C259FF4034C3E10E8E41C6A006DC34A6FDC8B05E67F063DC73C163
3D1E47B090302D10410EF873EB4FF2005AB0520BD61B5B9BB0E428E7579857AE
852A7BAAAE0EC284EEE0CED675DB101C43588027DD3ED32AA6A71A31233973DF
80D098028490809D784C7E0FE67DEC61D813B1E1FFEB38C81C2A82ECBC845C31
3D10F69CC60E513F3863A5510200E2B00B3ECB850C8FE82DF69C60AE3C8386B2
644061D1B5F4D9811CEA38CFDEF40977B4DDB2FD554CC26219B19C658CDC7921
DBF7D89C0D2FEA39921E9B04BB4B7B447B1389F92A0BDC5EF436763B0949ADB3
6E8B541474F7ED86AB1D3367B36B9896753AAD46FC186FC2B2D60F7ABDBAEB6A
7A700CB2999CCB2CA909DEA0AA288989D27273E29B22A90FC90E44412F53BD5A
EFFF6BAF2F97E23E00CC1D673152F47134F7AA49AA54B7D7EA081F60AA44C1DE
3E46199CD5F7E13B321DACFA7A1E3F0942634CCA91D3AC28FB2B3985342A87CC
71EF999338F1A2C1506B4F72315B1ADDC99FACC13CAC2C6AFE32F0813295A9E6
D58F741DEA88F411E9C9564062E5A5621096455A40E80272E4AC3DF0C5B004BF
6D35F1468C4E59BE2A127E215F304ACC1DDAFC11B8EFA9EA812FE8C01DA21D8C
34B8F4A7C4C78C761AACC6FDB5ED56203A01979B6999FA87DEF0DC89350A8DB7
200D4ED72A9699EB87CF7F67250609E79B6027D575F94FBEA8D9D09165649861
AF6B9D3ECA35C108BD436FC2619DAC28E5A0042E812052AB9000522C35DBA903
C3FB9772091639701DD57CDB934A2EBD59761C5D86D682E50C07F85822200417
045743A2280BFE720AD82D5FDCF57068B824119D1BC9B6E99A4914ACE9976120
D15610AA6B85C869678BDC2C011F896B9A8244122992D13524201FF5FCEB0727
48C1049B994D7130A94CAE8600E4E1510EFA5654448757CB7A33B4D20653D285
07844382A42F02AB19B681836EFE21D766FEE1F97285D91038BF21E08C69B323
38513BFEF849469361DD65E203B6940F80A24B89210ACB4E8AC52BD2B0A07747
E5BE2DC6F528D13994A4233E412D3171C2090ACC1ACD0335620BB6CEB49FDEB6
3050F095442CE8606B37D94DE96EEA0276A53361FCDEBB2C4ADD28C11D9E992F
B35CA037E7B850DD0DCAEA8D348EAF513D2E5C639FB0A27D01970DF715CC7643
2DC0378F59BDFB60613EAC88CB33A388DE893D8382DC9190A458C233DB8B90A6
35491A588557C9DB3A0B834E53EA19DB72B54CA6C035C305D73DE0A993E0A6F2
870927887728BF911E9EAEB9A5F93FF8ED3847A94569B639C9EB48B8EBB7F64D
9F5BC138C4BDA9D2B5720CE10F68AE90AEE101E328BF1E24FDED7CA629AA9021
107BD0436A14E3995BD5709866F5672E0E06299FEF4F563435793CFFC5F5CEAC
D7D1291518FF191B2FF9F6103B30BA887E96760EC15958D0C2CB307EF2FAEEF4
6CD75B798C15BCC5EE1580841A804E79EDAFC5939FBC8886A747DD79E0727FCA
25C45E83ACB8FB5E54945B46C4308DBEB24FD87DE15B264B234A4C573F2C7A91
5DA9C7D39F18AD0D0671A36590DEA35B5D3281D883A37065DA9B709CE3688E6A
608382FEBB27061C1C7C4C90EF5EAC73CBA89B274F2E64C5115A856801825AF0
6E4B931292BF54B5DC04A70E333A40E66C7EEF87B3C0D4B14BB7EBDA7AC285CB
10791A48987103498E7C91DAA4955CB4016AB50DC18FC380CC94667420472247
8F2AA7F88EBDC81775329A8230719A88186F9693902CB7488D3BB181AFDDFF78
6AB92AB6AB0AA5A710A6E08756E4C842BB72282465C013D3E27404C6E487EB79
D50C55D1A3B5BDCD552C696104B43C146AE5C6AFE81F6D9762DD797950278DFD
93BFC7E93D67ED5D5A0263BB9C9CBB568AA9C6FC2395AB597A3D07DF5F4B9B65
AA4E896AFBA8FB295E9279B83F0D260D17CF96CD4AC5411FB9620394548D6DED
9A5E849D8BB4C501371EF55E31AA61796755B2AE85FCD230DC2A2EAC2429A20B
8B1408F5323887B6F16F81E740FF1FAE2EEE2FEA3E4C9F9CF948AB15CA17B3B6
E2DD01E28E7F4CD8F38E5CC43ABC27E22D5C3DE9C15B69C926FD590496E3CDAE
CC8B59DA80AEE47354CD70027737C4C3F5B13978A6FE371842258395BDE7D23D
7395D0CA62EFD251230F9E7B55CC39BC63A61215B823592520CC69B1AB5DE183
007AE996C98D5DD0A64B481130F62571C28E1D21C8B2F79E2D6E5CC8D5A1F124
CC88C340D338B72E932AA92266C2EDFD7CE26BD236315771CD2D6B0F47234FBD
84184E38FDBD61F39EF4841A01D50B67BD5514121B9FB70AFE1FDB4E22520CFC
2085E71F4F3B396755E7B8C0CD020252AAC51823F947D2740AA0E0789CE42888
6DB048A324686F375077F1A39FBAF781132D2DAC0845BB6FEE11A95331EA55DA
3621226448CDE2D8B2377C0BA688BAFEEB11B062DF967FBDC5B99604E91EAC0C
5118D82ED736496445392DDD610335D3E62C01B464DD043CA6867AA3F21A0322
B0F17ADB07DAF6E191C27954554B56732DA93CF81D08F70A4E80FE94CE2A76D6
A86706BDE19B401945388CB1B781D66C4E07AE3AF3C0DDCCB3E8A727418F1746
FD1BB582AF5B2573180B97C10BBC57681B8E414A60D64AF49D12241AB78911B7
D4E93C0A556E487F4490701940D0135C390C989F9AEE46DD8EF81FDEAD747F26
9CAE252F5CA85E0406A1F36006AED6AEE1F1F4C443CE8DA8CBC63E6F8916B3BD
1D7B9627C6A79DAB0A6004E5370AA99F8202F30F64805D4ADB74FFFD776559E9
5F9EB67E8348C4F9E1074D96FE08CA6F9544F963EBBA44D7A6220406671301F7
CEA28BCD6017346EE90F3D210F2F59E5D94B1E59707EDD11132471B17D5FF4A1
FADE5FFFDF2F602F99714BCC3E2AEFF27D8D0C34AABFCDC981D9D962E6093FB5
4FC715F924BAB649D0F4E60156094AAE8DCC00ED125F50E2A4E88ED623699BCB
F8D6820FAEACA782C1A1E2DCE54E6DF8AA8179DD8B9502B901D5B0D6055FA81D
C6E870ABA178C4EF53D8858F5B234B77077BB0E81CCD3B71240A425B1E061ACE
17A2DA2B071D4736689451943A857F7347B2B1B1A0B8BA56C631AF6FE3BBAA99
04CC8010D11121B83F5908CD190C706393B5A524D786780CADB2E91430E14052
88E5B2D43794623989B44A0E2008D6065EE4398EF9BE3F4B411052F478458684
6FD575E513545B2FB1AD12FEDB081EA0FD95AB038102F3E63F30A12411C5CC1F
623306A669ECEB5744E92CC37017C9FACABE75CF33BFEF22BB8BCCB695E9AC78
BF994D79F183DDF430D353EA6003B905DF0A3DD7824713DD6C4E22ED4C84B30A
8AA590BB3222ECB59D3B17F7306836CB5CDB1647CF6D3937EA39BC83F2263165
76B9428395C318AD162604DBA20BA2413BF5EA40F1583F1CF4A99195FE7E8D3F
151EA87B69270D07F95D989B30A92695B192C354E799A7B37D0219309CBEB261
981143E1598DC42E4D0F24EAEAD67D8CA8EEE74B21644C2DA14232AACBA4F78A
BD693C11E013198DE3A4720AD88E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE28698258
7F5F423DDB055E4F69C681B6F3BB759F07EF67A4F9E533EFC2F6FE3B5B787B47
63FAE23D9F224BFEF893B679D928FF569C2B2C2A5046F04B812AE899A5E2BCDC
B0AC286709A18943CE10FFD62B4BACCAF183331F284FA436B5D85E225A7923BB
70F764EE27EECAA9B911AD24C53DE5468A97F7C23EEFEC637627A3978DB446EA
10218BC0B75452B689EB00A2434CFEAB677A5F8C9E5A52F8069A8DA10EF3B536
079C4814BD61E171029FFFCDE91E45CD5474BA48287B9FBF5DD01C6568402407
D4F038E494F0BC5F5F2BB0B9AAE48E6DE89A8277426EFCB5EBDAE1E1B220C7A1
A9BBC51230D16A36310717CB0E9FD7FFAD74BC9291490F2B211FC56E8738531F
DEC9DE88F4DCF19BA3FD21540E82526CE9D79E8898AEE96CF0F7BDD9BFBB983A
8E8EFA2B22E221C4EEB1E11CDE63771A4ACDDE5013BD50BFB4BFACA9B27A6A8A
D62F39A21E7EC4FFF53778BA98C6F681D1E474BF6F5DE270234D42907F57A1D0
E9CC5DEA5B3058356D2EBD3AD27FCA940F7396A730380D09AAE4B8CBFCD8DB55
A1675D6098269708F78EE6976FA7A04BEED4ACAC7620A590FEF08530B7AA5394
051C9862F7758F5BDEC06BABBD8DCD76A0CF33F50C0C9CCE9458F063D0F2EB1E
245F7385B0791CF1D0C57C51AC6085CCA752F0AB01664657FE2ECE741F7FAA43
93EDE69991034454484370BD3E8754DAC525CD6C1BC7095B6466208184F861CB
D860E2DB6C0F965687311C73C73B307837CEDCD5FBCBEFC744C39B7CE7C86F3B
DA23448C5A33498E225CCA456008771EFD443FECC8006A66DD3D1444DB222AA3
D7302043884C961D34D37D66E187E567D8D9D9CD79EEA7E3459A7A103FBB21BE
9888EE330506B2217B1A007CB30D50AED7DC2BFEF51616E705C26C4AD450467E
64A62376B852A5037DD457E89AD3483AF9A2A703C47AC22AE5E318BEC4C15596
8114FC4792F54E3D32C02443BAD977344CF4FE5FBC1063DB5F8E4B5DFF58C670
65D8758750EC43B77F89E413AB6BFFE94AE1A089D29F8D7E7AE0260815D57BC5
DAE801D544D81D35D76FAA0F7244E7730E2C90ACD55C9CC8E4A7265EA33D48EC
B7F3B40328C4997B854E5FB1F8F024FA6F757AD4C4AA7050B1A174AF9185F6D9
F0DE379B95D008DCFEADBF8F3FBD685ABF0B7275160561CAA4247ED637605922
320C6FE91C2619767454EF864A649E9E216C1787F87122BB48E6875B44538AEA
38ACE7536F1897128E019E27BC60D30A0271C9B917AD9A19355296F809C015B9
147D2D8013185746558A2BA34066DDC7499BF034041330C2E9D74509189C7881
505FBEFF8EC11E91D061589BF1A09CC121FB9430E4EB1192494FDAEEBEC138D0
21757C547FABF4EF1F837B2852C33B6118AC941D3085B4DFA0A65C1D5C0CD905
66CA4E6E5686CA5BAE013E9BB0D8D614C2AD6E7EF03463DB5FA419EB659C9737
9BB0EB72113B2EECF25F33D88708A4DDE98FE98151BF26AA41FE8BB94D6C3F8E
7035E88134AD4FD8CAA5C41F99A7D46B2B4859D8CF7224A06396582629A1646D
57E58CA27E3DC16E3ACD735D40C29DCDCD5EC321F212C5D84093540A8ABA0BC1
64294A076933037C8D31212563D6A55D50F288CC7BF4390EEC6BB213FDFB55C5
508F6ED88552AF3A3E48B6DE4AB802395E7AE3941F845A4C78A93D07DCC76DC8
FE9D2180A068E0A13FFD73AE36AA12BC185C6B79A5C43B58CDA3D74F2AA2B37B
559C5CDE7972597DB39482BAB6175BBBC2FF18EC3E1E6E6C6FBABD577E8E8C8D
55AA712DFDDDD6392B6433AB68D2029149D86BD945D735C074CA04AEF50C2ED5
F9F22204E741903A2D26D5C6E6032FF50BE271B49BDCEF9F12487FFDA4435DBC
C542D75485C86CE80ADDEEB730EECAFE4B8A96333B8D0C1ABAEE487B4ECB1AE2
0A74059AAC9889825612F48F8DECE168F1DEDAC01735E50DC5E027AA2CF73DB8
301155C4ECB1F069372FA867873ADE088C3B92313C2F6F6C6010849A0C3859F9
A54C5820CA1533005BAFAA91EFE7E3E3B18D78126CC789DE132547B8B07E15FE
8283B2C17876B477AB765367F07F4423D5F2C5A4C54F8237664012840BD9CBE1
4410153ABACC63EC171B8CFD4100E6383485711F30FF1A7B9D9C94602DDFBC47
A35958CC8828C021FC922564FC7162C5E85B7CC03B235D9A319A3114DAF0E72C
54CE905679AD0A00F069B49EAE45E759974137073B79B0E234849129B64DE710
489BA93DBFD486FDE1CC6066608B28DE9F0818861CE3AD40301FC5A26AC9A73E
DE94663DC9189D378F63781971681E690EB63FE595B798512C1FF3702CCC2D63
E2EB75FCB039E6367A9A7BFB4E627BE2FBF034479B11CF136144F40E81C5CE94
51A4A1CA861D774439C31379F39921E7D92A4B2796CFFDE756DD3A9DCBC3EF7D
D39CE071C3017268131F77DE53B00E2FDDC670056F2F96F4560F4A4E09A8E95F
A967F9F37B1C9B71492587F965AD3D4AEB5B3D0F40DE3C1590A11DC20E8A3E6A
3F6BF84B5F659F690509E6D71C276057D2875F438FD0FD8C2B8A0C6BC4B63B9F
CE474E507868A64A064D562F3670FACA76D8C44DE08602C5269B933C1B2BE7E0
9D0A4AC00E3F0E9DEA31A1A37969DEA547F1692A0690FD399D296BD3F08A0FF2
1BDA48BF4421794856A8FE3EBED45F5631A623481604E3880970742A7641CE81
722D6ECEDDB5623523450174F4D26FFFE160C01F54B4ADB31ACEC517637AF909
F0DC9164E5804E7D78CDD5309FF315C640563A777874146C595A90AF95AB0B4F
5545460DE2BAE9198332ADA025D320EFA941162C2FDDB75E1E12BECBA4440048
7E41FBC9B95F5643563248504470B0A8C76AE4EF3F319257129CB7CE73A647D4
DE323FB64A3CA41E92DE635AC7EDB547339DAC1D527B08BE2505B56C4FE98752
CBD620A691F57D3C375D2A4E2A56DCC0A55D8DB55600F3A8A0546856F038EEC0
527307DD38371E7ECEDF005434B2A21226285E4783CB5B2D8E99A068B6F54C2E
DFB42F8C6E92C3AFF805FECF4D60C0D182F0D4CFBAA94ABDF02A890D7983758D
49CE2714A4C52527A7D11C709BCE2E6D215372E97882CC89F619C3C2896A7070
F3DC59A5592E4E2F82036056EA3DE1B1F546E18B9D19CA9F96A97851EB05A618
211852F8B8CC1BCBF3240803D7301A29154E800E8CA5D8D4AA984AEDE26336E1
9D71B23F3B4B68F8566722C0665119BFFA28B220170DCA704E2E79055BBBF07C
ABE9FFB93B8F87C9D5BC6A4A69A8FBA8DF901764877BA028D0DF4632CDB3417F
86843334BB04907109EEBE3AEE386DE41CF120EB049B3A13F8629D5E99B17A34
793D68B6FB3364CEF9E9228B0E4B249C533B803F996B08158176B5AC393E6AE8
809022BDFD7B7A8AF003C40694FACC6BE7DC9F7658DF34280360C44A7B0C03EC
A719C47DD940CC513DC7A0EA7CEA44A3F5ACEEA71BD3FD258B12ADBC12AC6649
67B5CC346D638A3D20F8AEB56BC5B4D3DC70B06B7A60C66A5775E68B859AEF9C
490D6FAB793B2286AB780DB127D068C0753D79212CE84DF535ADA0DC16C06310
1C4F44D90169E84DB3F95C53D5811CD2EF9EB38A52C48150939C4FA19B69255C
C71FAA70DD0DDF28263D0CC50C7A4AC83DF5479613FCD8BE0355567D83F9C95C
1409A8B17F40554C8E93C22D614DC80A0B9B49513A7C6A33BC3E18EC8A848502
DFB216C81D27E22052FFAC7A7BCF3773CA0C9E43C8FC565D13F5046E57CC974E
8EE3CD3298E349F064EB970F5B19CF3EEB5C1116E61C97FF5F081066CA9AF324
4C45DCEFAF82618D3CC78F72BA852B6EBF208C3E86171DBDE956BA6D93071E37
CB5939DBC22FE2F37E4B513DE50D7433F9C399783704AF8130937890DF9BEC3C
8D6F6773D5CE096ACF3266FF984E8C8B528714002E40022DA25045811F8CFF59
666A3FCFD97A06CD609F77AF1DD75B3E771F430E7117299A37D2FF1EF67F0154
94631CA93071CADD5D9FB457D385A29904D1B2E6884010DFEB321DFB1B49CF27
4F8CEFD12FCDFB1348C943DD240787BE9DE75E9A45120F41234FCAC0F3F91223
1BD1483ABC90099CD3FFB359B0045955C849171E5C943C10F32F0D2918CCED75
5C67E53802602778EEBAF1BB6FF28E5DE6141C3E28149F312D232463604211BC
E3656DC857D5D2C551896D33CE49FC76C9A641B8F4FA182FC79C8882F99FC4E5
418FE38AA85CDB7111BB45F5DBA4B44C6590B61B2CE1B5A06ED99EF6A0BCACF3
7E833E0A7B7921377F9645E592A3ECA78614944BC3FAE2EB2544ED25FAC76584
D36EECA3C6FD600A7EF59D5D0998D458E0F512B6A2D86239E098C39FF66F64CE
6C20D7D47F4E5E6185780B508015C3BEDE1F15795A5F8E98921E8417EEBA8ED5
5E8CFF3B6BE74F0C4D7D7ACB70317A24E13022E843534C0D431C9E8DE1875051
BA199DAE035A071595FE2407295696A3842112414B5C65FEBAC55B6C09DFEABB
B96A1F016A7DBAE60D5870EBE7A6FE732BEEB766F7A11C492CCB870DE629D404
66172794169BD10392E12B20C0A35209B19E9D59C195499C4C004B707653C7DF
160F284F4DE618F731A0A8D7CE46CA80C95315BB2E3F51185B369D3BF862B980
7DDBA853BA199BD4424B0D46DD4E7F5672DAA228A35B2A07FE1E32832614C191
8BA6B8AE886072E28E5B85593FFB692D6CED8E42E1D95444A83A56C5DB41ED7B
49DB24940A9889FDCCDE370E4B0A9D44250E8FA108FF2AA23437093695D5F744
EB606FEC89E75217B01CE388613612FF6126B5DC44BAABEB0D6DCB4CC5A15C6A
FD10E6500EE2B22080D199F70ED0BCD807FDFB44E4D0AB82A9BF4BCFC052622C
668F72156C3A77ACB97C9318C3F06A6CF25B82ACCEDB1F7C7019668BCA14ED47
6C672290175E7500DA7A7D243EF25569DADC4EC12A855A0BE867351545AF6716
5EAF3EB5851293F56366031EC186BC103AF3E7F192FC5DF3BCF1D198F23B68A7
E3BA13A35990BC3BBEF8BB14B9090223937D93C05DCAD747DA962561DEE46FA2
3CBEE25085990872E247997F963E99804906F8653FD8CF2A7C3B1F6116EAFD38
B082E36FE5527877DAD2F22363A3ECABD1D23C8E91A20CCB54127F07BA29E80B
C0B8A347F22FEA5D0A16A8A6E911E9DDF8A379A686E53CCEFD0BDEF396ADE882
DAB5D4BF022B6CE1070C45F2661B8BED7D3ED3A69800C0B4BDB2695A585C2A99
5295A85656D3E5950058803A3B5670BFFF6FF616939F85EE15377FFE889F5FAB
27AF1EDCD88E780F66919E4F96EF6C5F6F49F3674AFAD6DE3CAA51533990E81C
39A10390859A3FD6DD88DF80513FC9769076F636A8A168640D5CB3E30B914C68
2B4FD8995030B8E7F6B9B474EA73D7C9DE0A739AA3AB3951FFF6A1FC1A5BB2A6
CFAE4744A552C1E15592965CE85AF905CE3E1ED00DE1DAB7BCE5B58E92248BA0
C080D24AEFD8DF372511E71D039BBDC15D3972BDE43EC799EE8CA9B93ED3A66C
7AB3249A420C28954EFB6BEF8BF1D068D25EFC6DEFD08B0BD398831FCD823689
AD978DD793544799A1C6A834FC07FD7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (mtiipractice.dvi)
@start /Fa 205[33 50[{}1 58.1154 /CMR7 rf /Fb 129[42
3[39 5[30 39 2[42 1[50 73 3[29 38[63 4[42 65 26[52 33[{}12
83.022 /CMMI10 rf /Fc 134[44 44 60 44 46 32 33 33 44
46 42 46 69 23 44 1[23 46 42 25 37 46 37 46 42 9[85 9[76
52 2[30 2[54 57 63 2[62 1[39 1[65 2[23 3[42 42 42 42
42 42 42 1[23 28 23 2[32 32 20[42 6[46 12[{}49 83.022
/CMR10 rf /Fd 139[52 53 55 1[75 67 75 112 37 2[37 1[67
1[61 75 60 1[65 16[92 2[128 3[50 2[85 88 3[102 8[67 1[67
3[67 67 67 3[37 44[{}26 119.552 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1150 260 a Fd(Midterm)45
b(I)g(Practice)h(EEE)f(161)939 431 y(Applied)g(Electromagnetics,)i(F)
-11 b(all)46 b(2008)1417 684 y Fc(Instructor:)36 b(Dr.)h(Milica)27
b(Mark)n(o)n(vi)n(\023)-39 b(c)p -68 871 4134 12 v 0
TeXcolorgray 34 1113 a(1.)p 0 TeXcolorgray 41 w(Answ)n(er)27
b(the)h(follo)n(wing)e(questions:)p 0 TeXcolorgray 175
1279 a(\(a\))p 0 TeXcolorgray 42 w(Lo)r(ok)g(at)i(review)f(questions.)p
0 TeXcolorgray 170 1412 a(\(b\))p 0 TeXcolorgray 43 w(F)-7
b(or)27 b(example)g(what)g(is)h(the)g(de\014nition)g(of)f(inductance?)
38 b(What)27 b(is)h(inductance?)p 0 TeXcolorgray 34 1578
a(2.)p 0 TeXcolorgray 41 w(Find)g(the)g(magnetic)f(\014eld)h(of)g(a)f
(linear)g(conductor)f(with)j(curren)n(t)d(I,)i(as)f(sho)n(wn)g(b)r(elo)
n(w.)p 0 TeXcolorgray 34 1980 a(3.)p 0 TeXcolorgray 41
w(A)h(coaxial)e(cable)h(is)h(giv)n(en.)36 b(Find)28 b(in)n(ternal)f
(and)g(external)g(inductance)h(for)f(the)h(cable.)p 0
TeXcolorgray 34 2383 a(4.)p 0 TeXcolorgray 41 w(Example)f(6-3,)f(a)h
(sliding)h(bar.)p 0 TeXcolorgray 34 2785 a(5.)p 0 TeXcolorgray
41 w(A)i(circuit)f(b)r(elo)n(w)h(has)f(an)g(area)f(of)h(1)p
Fb(m)1390 2755 y Fa(2)1427 2785 y Fc(.)43 b(Find)30 b(the)g(v)n(oltage)
e(across)f(the)j(resistor)e(if)i(the)g(magnetic)f(\014eld)h
Fb(B)h Fc(=)26 b Fb(sin)p Fc(\()p Fb(!)s(t)p Fc(\))o
Fb(~)-41 b(z)140 2885 y Fc(if)28 b(0)23 b Fb(<)f(t)h(<)g(pi=)p
Fc(4.)35 b(Explain)27 b(ho)n(w)g(y)n(ou)g(found)h(the)g(curren)n(t)f
(and)g(the)h(p)r(olarit)n(y)f(of)g(v)n(oltage.)p 0 TeXcolorgray
1979 5741 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
