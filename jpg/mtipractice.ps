%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96 Copyright 2007 Radical Eye Software
%%Title: mtipractice.dvi
%%CreationDate: Wed Oct 15 15:24:30 2008
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMBX12 CMR10 CMMI10 CMR7
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o mtipractice.ps mtipractice.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2008.10.15:1524
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4DE3E3F6222F
7A252B780C86447859579C68FE065411FD8ADADF4FC7DE51F8FD675D89D8660B
E7C97553F2D04925B72675324E1F1812AAA3BD881E968F16EDE2BDEC29955667
9E28B8AFCDC4E73FC735123B91F110188E4158D075070E40460602F27C12ADA7
A45B6318E24F206E2CA486BC1A90C9AD86B84CA04B57354721DDC0A60E6C3A73
429B900B12A14AB1A57500F5DA0A649E0E3899029331E48ADCE3457B064F4D4F
D4C9D6AA67E2CC75B822A090EB31C4E78B3FFA9F9F3DB10177C5AB6561041870
015CF27E4FDA0F155F1642F2BD0D4CBE322B29DA184C025DDF95869B5218A24C
90802F8C9FC82FFED0A466A364C162DDF246F203E46D650355B4C10EDE176886
2474B6FB50199C2F24CF819F44949E8DED68D4167E6657E434923FB5500BD442
56A0B82C3B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 120 /x put
dup 121 /y put
dup 126 /vector put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176671A33FC55340CD04C2DE46FD812FC2711A85D33F55B4485DDD21578A
99DEE74B08F90558227A29258F7C3F88E9432ACDC18729C3ED4F5CDF65F2B8FC
D3F22EC950ED0338C606188E82DB0D3A7A60BE0D84E4B0299C181CACD36D6B7D
F2775667D5D704288433C4321F077917C85A977DA33F6A99B91346DB108032DA
C8FB85A53C070B2919DA733B9693DF7D976A509B3402D906C7D5F7908E4CF8E0
FDC024FEB199F484956DF08B7CA18F3B99DB13D4BC80C22F147AE1ADEFAE41CE
F31D364742C9F1D9928221CD44A603DAE4E45706516D7C2BCA25A4FD99394556
ED436B28EDC0EC62B6A906686BDFC2E11E98095336B45DDA6F66D7DCFAE85D4C
3A629DC4B52B21823FE67048035D49AADE940B02C64352112E804421F6DC3AEA
4BF9B04F7558ED94959FCF0D38B36E6E3260AB4CDE37F50676D128F78E9E3B6F
C81A513C7DCA08BBD1E4DB4E2E2D9628B5B162630EAC1208643C4784082E332E
607292408937D3B9CD110423ED9CA7844AA5EA430AE04D53DC4048F18147C2BD
A5912A25DBC82EE5EC59FF283869958A47BE803A0457D4674DCA4FF1B2742834
2A5E672C276F14721299097751257A6D1B0597BA8332007CCC4DF5BAD9311405
1EE35FD896FCE4DFB24A531E26C22106C996E7A1619252BB59C64D59EE715D48
BD2F0D3D192350A0A4933BB398A508661F7B602A6116E6FD6CE36C8A36CB7551
40F274C675F661E3477D0B1AEFCC6BAB7D3F349C08EA396144F9EEC936C47E3C
3B9C98A287AA00A3ED0632CA16B568F8C9B4971075E241D8368BCC6DED6CEBDE
F6E2C1394E4CD6C0BD99D78B4AC5366181E80EBB360C9055ACE0D47971CB5886
856D92B627DE88D699DAB8A6090277AECF7F3EEFA371D05795F059CD1E57D725
1CABFC04D1296B8082CE4BFDA806F488DE34269D43E940F589BF04A6A1139A61
6BA13D9FD39816F543CEED4F20B15BFD63FD46E35B36DF4C80887020122B2B2C
D03E08C3CED86A34C1ADF4E01562C71957E32E0538C4731B7847A3FD11AEF0FE
8961D431EE782CFFB0DD504D856513078886386E653817483B34ADB579D3292B
666D8E741065E47E706A15EAF5DE95FB40DF60D3825A0304CC55C55728669E41
7BCD15C29EBB4AAFA760535E63108227C55EE62F180DB50898BC032C1C730576
72C66EB4BB5ACAF826AE7696C1F4160F7FC62062D87CB5D3B183916820CBD836
ABC7F877965A83E54D0075E0449035ACF91CC827686875535F24E67FF08A2B9B
61FAC56961126FE89B56EBF86141B76DE878E530C68423730F8DAB2870E38042
DF89ACB453E5F001CF307A976B2FACF0BAB1AE53F971AB2EB76458D0844E5619
F079FE0995D154614B5D137F2F9608CBB559965AC9F00B0319277635F98BBBB4
B883487B4FB9E47EE88D5C2EE9A24B30170BFAF38CAAB350214B2ACE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 19 /acute put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AEBE7F8967630A40E00F8C1
3054F2BE2768682E50D0B43E3CE3897D9EE7257E77F9894CD4395C21585D16F8
AEFE05217ED4F78C31FD635A00CE5D0DFC7B0A6BF9444B62C836087731D6D205
24A45B3C8D80983A67377EBBEE171DE0B4A21368F9B83AF7CB286D8389785E93
B11277C65D4D789AF99B1D7A3032947A51DFABA0DA3B94DFA8ECE2B7374827AE
168634FA007F8981ADA04F102A86D9482DAB615591731CE5AA2C88B3F79EF0EC
F6B9CA67D6AD3083ACE6EA3047B0C39C8F087A741E5041696C183D62872AA292
3D802D94278A2835CF3064D883B7D7B3EEF44DA63AA037F3FAA2C2E943119225
026D2F61BD858DFDCFED1F1B357C6E2C92F79B30340EAD8536BF01961C34DB59
9505D3A3EC96839904EAB292E67A5F3280E59E14C1F64C508C3C81BC1871607D
B02675B11ED30C7DDABE98B213EA5CA9F0C24AC1F2C37FBC42973E31253DAD08
488B1C71AA6F08A5FE3F6222ADB8D65461F8BCC18F2790BCAA133621B9667BDF
4ACAE305AF149F6020DA3B7676F66008F92C6A9AD8C4C6E6394AE72B89425DEC
8DA3D4C45B7068EBDAB3ED918355FF301792A3673C46984D4C37A65FCD56AFC6
2B6A88BD1CAF1BDFA196FBBEB6FAC4777D7389C148C46FBDCB66F683EA74F009
2C0282F0F0D03AC1AD45D28C67DE41B4CAE3FC0651F98BDEB11280035C3F7D07
1E0B92B56F81C5DC277D69F142F0E278FF2F04A7FBDA01C6F367F9347574A0D8
8A1164C4FB1D508B308C44F7B0670369AE00A351464CA519C9E8B24E1290EB53
F373EF24A82EDCEDCE509D926BD5E3C4F6E467685EC40F8FEE5D9F35EE894780
7E398E0A6A331AEB60D9559557A7AF8137D3F368BFF332A755364D407147C984
9D546B17F8AC080AAB891E724560A6D1726A8B1DB8E54FAF294389E38223F5EF
624DDA70448F6F88F84A880C2CA0AABA0D3A5B36AD586BE573C8B523D069EDB2
E2ADF1F8CD7784896560A1E8B84A17E7E426E427DBA3AA1D13CA6E530A762089
A6410E7005851BBD2AD9D78C61ED632D0FDA330CBB10EFD4B3ACEE1BB9CFFC36
EE1E9B412CFFD76038A12ABE23EAABF4378D938B3B26E1F3D6BBABC06A766154
AACA7D5BE37373A33247B8A13EFA653E29CDBE7BEAA5F0BCCD1EE01EF584B70A
2AB87C4BA848AE2493AFF008774649F0BC502DB9A1E2A2BFDB56BB187505E953
BB58670F7F6FB84DE14D9D6D10B556BAD6CE94E11609A79234757034F42C530D
010BDD74F9CB5EA9D510AE7E93D8FA59AF42507DFAFD5AC5035DF2BCA58544A0
9BD7F569F727A608D01CBD43EBDAB71C0AC8FDDFDECD61D04233598D48412BD9
B04AC4E384A406E9DBD3471FCAF5D45486CBF1687B722F954B9B565A7D2E4852
14E42AB0FC6C636200D75F6EAA4C1D811506A63AB1FB02ABC253243F009A5202
3B894C41D858C17F56C1AEBBF8AE18CB88CE032DD87550FF49DE2BD39C8E07F8
6648B4195A159E39C04AC9FB94061AE2162EFE6CBA37511740A721197C473D54
4164D2879F4AE4D81CABF57C0526B5F4719003C8D0EB593F5697EF011FEE59A0
B3911B29985D88FEFDFDCE5C5F6558ADCC718BD94F86AA1DFEDE92F9D3129784
B3F3D060D57C7C3AA79229F3E95289B0366516FC043D3DA3473FA96A8CA05BF7
49BE6B05D2BA9736BF863CAF9EF5CDB85A466F785095B638CDBD7C205659B146
DF6D32995230B8725EE8033DA80512EC9BE5310BA3AF23FF947BF48E0EA3DBA4
6D6581EF8BCE31DDA68FF77DDD69E399678706E58A5F07CFAE09EF6A17D84125
AD5560AEDFAA852CAC7C3144E26CEF25781E01CDEEC3600FEBF35F6EEA7DB53A
4BD755B4E299CFFF2968345336575881237BB62C33A06024FCECC7D2C04DCC84
B7655C2F564BD3608280BC8B33DC641439B49CCA7C43EDFD9C7D1253717B0D77
925D12321F942F939A1D457F188AB914D5311183D690361C87C3674826FDC64D
6376842A736F04D01A6C6757F26C45A73127FEBA0F29E204E34569CAD84004FC
A34A45F68F49192D14629820A4CC602CC63555EE628A3DAFE063FAE10306F820
73347F4509D4BD31361007B5C29872749E1AE1C2113ADFD74051FD0BB675CFE1
1BBCC1B87F8F9B315EF39334BC7A5DC1C18271E3CC6637CB75FA313884721F6E
C8A7E6FFA5BDBEB33F36B5227D998D2D2AD1C6AFCB847AD7D9DABD11AF894B55
E10D2B5CD7DC635193CADC3F9B5B31BF5FE0449900F1CCF19CEDF35C13EB97F9
48C372DED526B23D04E76442479FD935313903E3EB30133E24E1E3D310AC8182
7101811881B1333A3CD6EDD776AEC330CF22CEF1681A8489F649D89A4D41ACF3
62F572F2713CD85C4C9C3EFE384A3376E5227C26ABCCFAA1F4ED17EEAE79D353
BCCA79452DA9C0A19B1B68B486CEE62326C755ACFDE73C12A070F1BE38CE3F94
6D3C9A84B351F62FA2D982C444F3D4BF13FB449DC003A298A70FCAF4FB751F1A
B7FFDB53F6A36986EF5370FBE54105FF41507FF9D847842AA6D7D95A3AF9C38C
61B5F622F32190393EF80BFF54C06357CCCB40F3F813B57B9F43CEAE7AF061BD
F4CE7028E8B76FDE2A081971276651E6F1B8178E184250AE7333D51FE5BD6A97
7453AAFAE36751CE48C6905A7F21DA44E548B056E91ADF3AF21584F9AC72AEE5
153B390C6694995EA0CA39849393779F97E69C8B39ECE47C4BAFCD33767B1D1C
E4D315AC6965AA03DFB83BC6D6A1BF37C228570BEAE8B6AE789DBE2A83BA90C2
9E1B3098E302BA6742C179039EAC52CF85FB1715C50187C2CA30EA842AC24F0A
449F5E12A4CDF6A26DFEA96BEA942AA2602FDADBC3A9843EC57DAD999DBEDBCD
E152994B15DAA952F75B341B59B3B26760BEF86F7605182B7629AA7F2070F483
6A3514D473162B43E50BA5FA92744865A3A29A76776CA2E2FAB5267784F2A946
861447E0017ECAC796D55CA7C0B6A8F9CDC1F30604A228E1D121643F29388E9C
24A70E171CD372F4CC21BF37C50F6DF66C15CA3854A13AE784E51C9A889777EA
C00BC9B5B3450CBB3094200D5DAFDC81062E6C0EA500506F5D2CD55537CF8746
4972AD75A1110BBC6CFF0E7D2C7FF1358681440EAE3E6BF290EC76923F7D3CC9
92D52896A1B53E4A59C4E581320CEC3A40602AE7CEC1FC063BC55F1D6466BBBE
E6D7D1FE05346EB1D1A583109A32DCD8368CE39E5B3CCD8861125201410DA447
FE329438C29CBE0B0AC1059A71C68E1FFFE6B0ED5B521CBA792F7FE0ECD5B0BD
A7991D7C33A72886E9A977B3AF75A65A6B571EF7D90D2B7B9446C4BD47FEB4C7
B18D4B02F56D6F68FF191C8647FA66AE9BF2C36DD55230E10774E91C5C679359
E12503DCAB1AED150373A859D55F01EE6C29A434BE83F2E49C9CF1716C7B8D1E
B5E921F71DFF6C66C249EC16EEFCB54F5F6907B2BFC05EE02C9622C77B450E07
EADB17D21D01B7145A45C36F7CA293CB53F54C4D97034E1D981416A02C7BA629
EA68299A50C1642C356703CC8A2B8BDB03C90D2B7A8A6B215F0114854137305A
E3FE4E5F2873871DB0E9CB17514DA5AF38ABD7638C1A7DB8A296D41DEC9B2232
E1DB45176CB1C723EC9AFC71A056BA0DF21D3543C53F86C53A3A442025E6348B
A7D9E6B798FC0545F2073BB4C6944937F481FFC341AF5C35C87AECE5F806168E
FB8E21A994D8A28937F372F38084ADA0C28F789276DC1FA9DEAC3D9AA3C45D08
EE3268D45204F4665810635A07CF29C457E8492595CC0A21D323A8B8530ED3B2
CC92034FA9D9B970024ECA9742A2466029F045ECB5076AAA041AE0F78A946006
408A3549EA2C05EA9F5EA17772E1B90DFB26443B3C0CB9394F2E9C7D6AC70754
27E4047C41C8D45355F6E99C0ED5DD091136D2E2EFD5EB00C06B38296E808978
078B17CCC8B4EF736CBCF3F99A92358FDD855B94C5298F29C9A9A0295753694D
9502A21E5D30FF801158B679CCFA9B0D0175E8DDB8E4396AEF73BB544BF53790
FFC7BCB556A0402EF48B50FDD4688C63D4633FE867F452AB21B4C9E47D0BF19E
AB490A322127A025BBD4E668A916D96FC3CD2B1498328C0BF1833A15638AEE6D
E0FF7C724F67CB69924F6127CFA6C3E59FBCA0A8A5E398CE3988EAFFB3B46770
30DEA19427BB82DB9CA0F1E60C8FA3A6060FD2FA48991BEEEA9D500141EBE423
EFA37999C9AE1CB05F0B2B8B33ED9824BADBF313761F892FA5EE291F3D0F821D
F6C55941334F73A0BDA4E50BC887089348667F748D6C536F43461C53A49E91E9
143E73D182BD9825722D1ED3ED2E63BFE4C6B886F507213055EF006E297A90FD
14C66F71D4991EFD0CEFB35BCC274F148B3B933840704DAD73100C68A9B286A3
442148F7B802C1B6E99D9DE6C426B3C4993C09EFFCA12E4D4A4746FE2FD4257C
039DB72AE941C80225758080CD57B7045F6AEBBE4D80FF95DC755355621761B7
A2036F43EB84B28EA6B2DCCB211D663FE91CA795BE30857948A891BC065E1C48
F7613D4255F3FC1424E29FBB9FDAE6C2A1A5405860338D2016AC58BB134D195E
C3968B97DA0EF46BD2BDEC73AE1E66407A0DC55A7D1B34A91F18050BE141CA4B
1833F021BE27DA86590B095C3BBED1C4EA9F788EF7A060818F090FC708D5A63D
CED62AE11A6FB55B8125CB9E02B07CDD7495A2554C80EAFAA64AE3DB987FDDA4
315D6E639604A2B66CD0EEFF79D7B6AC39BC76638F0B00A5DC55C181210AC12E
0857D17B67C9B02979849C29015B54AECAECCC02DE038124B989B598B01FFFA8
9DFB515728A254E50E6A48AA50F2F38A0DC6FF9677601D0A4BEE3AB3B76865E3
8EA23E769585E770561C6DD5C4AB9B43EE66A14D23E18F2286AC00F2500AD646
0DC2744C59F248F806893E57110AF672ACE07B99863303C3CA1D9E3EC62E7F29
ACC07A77C42776BEB01046A4DF579E62E189F5B71EF0D1A545440490060E33AE
FFCAA4F6D9025CE2B875E3ABD931D729F285A67EE6E93891639CE87D8B97138E
244BD982EAEAC470C90EBC26083BFD1FDB2236602BD804AA6CD24DE0FC288949
230CA26E5007005614FAB3B4D03771943BEF0DBAAEE4D733D5986CB66FB3184F
F26D32065A9994B6B3C65AF4243F135574D0E24053A8F6441E781775CE29DA73
E428D125963CC2EB1D3BFBD44743109E01FE48370A759B349CBC45820BA50A63
9C4B9BCD5953E3FAD5FC5166468457CD8AD0A767CF8F335B6DCA395B0E1132D1
5E2BA18CE489A35333203EE48C0A9535E80F570BD4773E3C097AA45EB1A00885
5E9BABC8591AA1B747082C41D525555BA2728846F9634D8139EE60EF2023F787
20EB6151683C4AFC84739EE02692DDBAB2BE34BC052F7652A6F38407CE217ABA
F8094BDCA158BB03AF631F3929679D61A4F8EF8A35EED6B1F498900E89DBD294
9570F337FF242C8D40E36CB9FFB940A9B9CA264D07BE7487FCD21E9FA091EBE6
2D3CE6BA6CDF33F9E2644DCD869C6FF7609B6B1AC968EF750CF7A8AA569A75DF
AE78A1DDBD58301669B4ABAE46B771DF44B65DFB4B97AA1BA20FEEC7B66465C5
30D4A9AE8DBA760E1D9C0EE92FF7971BF62DE5A80D49E7AA95A33B8F553C44F3
2A9B91C5BAE2B5087CCB459F57A818F3187F3FD0C0B2D6BDC40E9528C78B00BC
6CE56E7514B052A1A66059A4211AABC5ECE6E2F4349AA8E14F84C07B90443519
10E9A108C4BA75D96C7843AA96931FFB7F1E202F15F9F22490DE9F6E1AE3BDCB
F63F3134835361FC4C78A88F69E1556BB1E922B30DB03782A1F54187A5F01CBB
A8C676AF50CB6F4CDCC1C4D2B208FDFA5EBB161EF33941CE72140356B695FF8B
192090B0AF4FE259570CF00FCD69B24A18FF8B9E49D9B4AA5E1608694202D474
71657078C0B72F454739AAD6AE4E7A6ED7CD65C2DB681B007B6112B131FC77DC
7541FB98A87EC58E6120989CDADF920FC8819128AF6DF72EEE016580BC459532
99039264F5EDCC6C85C26042A8A23E18886DFBDC9813D0B931FD20E76C9D7870
3F64AF1663547CBA9CC749AE350323E6265FAFDA1957E4567DA8F901DB5B457C
08774A1B3FCA47E78A50B7582C4284890D75B30BEB33DBB2BCB15822A728EC9C
6C9E79FDE572791C7A496777E1A35567A7F2C6289D093DE857E470FEF1892D4C
EE9C6450312BB78129DFE104AFDD1B6BAEEFB854AEAF1877C8ED05A0261D790E
1AC10B44CBD77FA681961113D5BBDB2EA71B6203DF28AAB6E562F9FC242A7A3F
F124F5705C3B85A0F4853A9209610228644FC27F1305DA036D8EFD23E3530F0E
EF60F4552592EA8DFA8C67D036291EB712CAC7A85469F48F7240036A55265191
ECB024B19E5B1BBB21701BA5939C9C9F44AC7F1C14C9208AB40B018E1413733E
75369AE24D69EB868D52EF19E085C4DFA6587DBDA9C65B6A4DAFC84A6A4E9301
FD5DA5386EEBD39C3768AB6FC1E94E1A507C97A0F25533FAF29D25235FC027D8
06786D962ED70472A16087274291408BCB2CEF96C9AB5F364A0055DFEC5DA7DA
B3B6EBAF680D21F5CF8383AC27F65B9490B94128CE054F1348FE5476B5E0954B
0FC31BEC96511B83ACB09D6E48FD1F715293E6B4B4E7EF59B9117ECAA519E979
CC73F38953ADD1DBBD655CF77FC9748613590ABA1DE47F1E68EACE0016C99E64
8D67BC8DD3A582CB3BA26403C44D095170B3BA7FFF252C0ABD19CF0572266150
A39C589B67E51B2C4F37AAA34B8B49A8E2CEEE2B4B20B8D869F97835383C57DD
BD3001AB64297719CEA8C0DCBDF6CFF3D4DF3AFFDB2A4D95F694C3E053005C24
1DEC40F01DB2EF4455E9AF9EE21DADC95299EE9A061E9A547B7CC477D4A4C254
34F0F908DBA717E855CE0AFA1C2E08178D068BF614913AED6E094FA2FB275B0F
E0F7B81F851457A634E6AB6319B3CCB3BFE4787BBF11D0F4EB080EF87CCA4BC0
E55DA40919D88128B375184C88434311E344504DE282F85D30792FF554BBE513
5F5845DA73A23CB39D25BCD4845CF1D2121AE70E165EEBF268BCC128CE369264
3FF0A8A8D3045DB0CEC0F081A75A1E04C018C13C9BF42E2559CC1DF1D128AF73
FD4EAE6AD54FAABA77AF035340BD1748EFB52B194E6DCFC0B4AA222488E9756A
44D62193B2BA2B651A6EF5E8366A6C44F68CBE51B6DB75383262A3F4B6712307
AA5EA15B3B1B43724BA2B09F49E18ED527C3DFB67270C40F7D1D8399FE844E4B
7363169D4CDF0D46F9533CF592183ECA7B35FE290CA9161D8AD541E98278D1A6
44579A7ED547C4CB50237853FB8C1D9507E79C6EE8D29CA20F5E1CE52BC6CBA6
95EF0F8F33AA18E38AD76D507696E5E1DC9F51062E648F8C681126D8BEA820B6
88FF906BEFB3C1F79DFDF81EC886BC880410F3A8513367886815863C0B8B18B9
0CDBAB357F185DF49A422A5D57ED2009FBC43BA5B6378920ED905EE9FC0DA37D
AA875287CBCF3A5D49C86B4FD0C334B175B246648A3751AA01543A6786E2161A
3CA7F341219EC65711F9705DA6E836A91DC8DF092ED74E3F802459277669646F
5F1FEFE1BAA897F378BE03AF31F5451596E58F9D9E42895EC9D3ED52CADB2ADA
663D7E0F5472A5CA3276A387C2A4D1CA1EC95D7985BDA64C9EBE941926728BDC
4BFF2868A97E9422939D709D50B8AC13564DD228FD348FFB819728650B98EE5C
52D05A595D5B33AA93D984951398BB3AA0C6054065046476AD8336BE06BBC473
066FB2222BD98DD1CF9394EB1C1D94F5B311D2F3598FC890A561AC3ECA772209
F56006B36A1E9C72B775AEC0FBB39AA7232656CDFE0B7191E37883DEC04F9D8C
B058602383816DE3CA05E084BC205EEA29DD0368F0B66B2BF5D9873AE72BCB78
021B97D4FF9B067D3F1929423FED65C19372172F143A354AEDF31A3C02627EE9
4B174820047668F44018C42DCFA291325146740F2B6865E46E955DDE650E7118
9CB028642B0CFBDBFFE63AA7936BBEA65128D224BDE2C6AEE26F86A65FA9B422
B99C799B08E77FE3E14F0E898D875A7E6E33C05F13949CC32D129CF943EF9702
1DED38F787E8F14701A5D6A57A1B6CA8FF20FBD8C9117C1D53E5D1FDFFCE0CA2
D24D310775AB5F22AF6FC7F552B26AB7E949EA18442D6464D1850214C5BC5D9A
5CF7547F554FF4AD71E67DFA09B30DF86C84EE07D6270B77F0FBD1190A9081CA
4CA3F6C64646E9DC224BB532BAFE91909F18CE5E969054AA13FF389B7371C8F3
81CCB299DAF6E2AB2963DCCD79DD374855BB8BE8BD8DBF43263AA8279E2C6FFD
9AC0DFBB19FDC67F94B1A27D8C96C1D694BC35BABE7ABE6EF589E5AFD87BEEA8
D1EADE4F92BA2CB0E6B614C792C2F609E95DA8AAB77A4EE550C43AD23A53BC23
5CC5EE71E6F4651E25FBFBDE2AEED98F28BBC28232CD7062057BD1C0012061FE
43CC4BEB9E59473374E60F7C780E18552FE8E7ED56EA25DB50E9CDAC100B7A9B
18CA19F7DE8E0423D770825500CC4DB810FC45066A1D4F176A2A002CFA1BE299
9FDCDCF7C14D2C5816C4E2571DECCC9657CC3A7B07F767C4AEE699AA17796676
6A0667C1DCE11383A6CE94D321D1F19D558231250B4C62B61C388209EBA1CDC2
4DAF00756436D9256F0670459E5A8CF3EEB4CE8B8BBD59702D2F2ED975B82BF1
96C29C9202F95BB3F07EFB8FD15CAC5FB727EBCB9734C692038F17276F32A602
76DF6C0B72C892AB0C012E63003B8EE1E5CAF453B67479BA856C81C77D733E6C
318A56909CAF3308BEBD4DE846F428BDA9F992F048B9F2DC4CF47FD1E5188E1F
D81C9D4813500B91803D15F7B1D1425BD09A62D036817ED61CCA37FE176C9927
E2E654FB11E98B21EE77DE3696B0D03B3C604052770842BD6B89CF881BB20497
6DDED998AB5B371B306BCE1009FE0641E67AC2DDCE35990D3AC56A39C3FAA1BB
D801CA62E4F086C4EF606D8A2F82E88B01A8B232A7E3E1344D8881F6EFE2906E
12B27D28E06C6D44FED0175D40E672DE395BBA0BA404ACD7EF7BF0AD44E33494
12A0746FB91EFE105B64B2421F2B522615BA1E674186FDB8E6D2A18A7391E205
9AE9462335D57D6CC1D5A0903EC26D6A8591B66BCF38AFD3E4A22EB00486EC78
43215DAE1AB299AEF144B647DD07B246B11B7FD1E7C4FB358A3436C535127B98
1C49E5BF7C70DB2C2B2FE65DAE1027D290E33A9D5A663F4F6CE91E7CFB5491BB
8F47ABC379DB869A43620D35E887575021147BFBD9C4816679344ADE9B886E4F
644B530E8E1437937A17601635C944FF74C975B5EAA9FF558AAA5684D3547079
D14E17EC57AFED622C9E5F0812AEC88CC078027883519F529DBCEC9CA4E998FA
885B25B85A897481215144099AAB20C219CF3839AA4DE0BDA84A721914882D55
1885ECBDC6DD1C4A2618FB745131E85112E48342196901B6FB085BEAECC2383E
D47355E6761F335B666AE01FBA4389130D3C305DADD8163D660286931A969B24
59BDD19D12F2C1E2D97BB706CBFE923BCE27BEF6F775AA3BC8683FFA3BDE780C
8BC32D6C1F670A5519A01E0DAC4BFA2CFDC1EA628ECEA005CA46B723330D072B
4F703DB1B86BD8CB0545DD79AB7C3CE2423773515AB3B829DBBD6A7A6FECB265
F53888E327599041ED348E0664E550D64FAE5D4CDADC11977EFA6BBF786EFC7A
2DD75B14FC1BDB2FE53905F14E739DE883B733A23D460ABFE2E85168F3F4B2CC
64D86F4D4FAC329CADF47A76B0EA9D4DF9EF11E39EECC30C97385628E10EFC1C
25C26EA2D422A8F68830A27F1A4841DF2E86E4442818FF63A247E699C8A24DB8
31EC5B452CCE885EE5A5E6404137DAC65FD2E08E6B07EC2AA4DCE51E0CA5C411
47CBEA206545B6C486EDE4B0091AB452B481778526496ECC1684B5B78909D20A
BDCF258D4E0206C963221F5E718CD152199A38305EE5DDB694FB2CA9DF642FE7
E3DD8B2BE32978B17AC84CD8C189898036AD721A87AEF7532758356CA24679DE
A902A12DBA5C9DAE070BDB4A796A91A6BD3352455C2DE4F5EE54F28B994B4715
5AFD0A78AB0A6CD8F16DFD61E6C92ABE4C4CE0F89FCE087FE810DEA974FF6451
331402B425AFBE5EB839AA40DDA03373A9E56B2E6C0247FB79B83F70A3A08AD8
B8B28AE4015A15120D4BDC4E6C148FC3EC1B6A977058D9EF4B7B82897108C3CE
543809D4F988AF784D46743432B9009710B64FF5D3E6D31E7EBA5ACD614E2C7D
A1F7D279CA6BA8532DACFDFA6CA75B620E551E009A47D2C9CC6A69990B3E048E
9DC8291EF2864800DF88A65B0132A9E6F9FC90C81029FE666C7BF1B53B38EDD5
13019C07172792D035220AC37C2C27D3651932D172B23CA95B7186885EF0F317
726ADBD079681D2623E232EFE762A917F92F6A3F1904AD13BCB86FCCD6CB885E
40755F2B0FF3ED7451FA85A5C02CC5E047EEA7CBE4EAD987EB0897EB2F513ED3
DE52D04679F5B7B4DBE172A5B44F2C733F478ABAD174701106686716E9E24EED
DB8DF0696608BB6A8AE96B02A184D337885FF037D27DFBBC3C221BBB6FD1E6F2
812DF0B0504058D644A9D5AB0D536C119E96DE08AA383914C309E71D64164CEC
4CDCC9DD6BC6836E1688F5E67BA7B82993E65EE4D473BCCA98CE650D3AD8A81E
3DE1F30597E2A51D22402FDE33C0A27B299E1219D8EE4E1255CF593724D5C0E1
E56011DEED62432C693EED29AA27790E8F77BDCB3536B35DDD4D425079CF6F3E
DECCC0EB2A2F1F9601AB8CB617C14F49A9DF89DE02A9AFE2D841A198112B55D7
6455016D83EB0B62BF66134B1FFA8B886B674D7D0ED73B64CE9365B65FDE9BF7
684E7C4648355F80E5F74B77D86A4091390F69814B7E7934E909F5BCB088D9F1
C4BEA803232520403E8544D0789F9CC0683256464EDCDE1EE657C3A24B748FCA
47654DCEE63A35003EB32DFEA4D12C9384DF37C88D0C481B086B06F63AF3361F
7AC4E922DFF3A8CC5DADDA51CF3D89C28102EFBA384081A7BA55181918C12C32
08CB7C0FE1C5CD3EF156783A74AF794BF38B4797F5E447E741D53303D4808589
BC450D15FB7F13649DBFDC9E56A9D88619C5AAB4BBB9612503E8B9C0763F25D3
11381C5960805864E640698A931E8C2474EA7B90081A099F152A8D371FABCE6B
1663F45FBB81FCD409C3A5C95568D5C958E92A2706FCB4720F3F8A8E60DB7FA7
556BDB47781BF298544C5DB823BF7E40E0E3313A5F2DEF1C6C81A953B8773286
DE213288C2961F566C19B7A3C7C5E24C94859D8B941BD3C8EF3735125F5AA130
E4780BB141F028171F30276DB00A1DEC97C97BD6248FB8974F4DF3F6274BCC32
047F005F38D1581D7028AD9C02DF424E1BA1F04561ECC7197E5F042F34463F29
E76B0C9C8CF9357275424A8020229F7BCE8AB02F57BFC01511E238D3C117C1B0
AC6157E98654761764C0E9DE94484D5EE77F8543957607176276AB56B2521753
5665ADE06A9047AD5EB51947F3A8954EAF1916418158C1A277816A98F957C5EB
7704D0BB1A77114027F5CA3942DD0EC97A5A4975D17DE1866359B6B2DB1D2AD0
5845245071F975CAF4B8B27BDBC6F130372B441965E3042C31514C2A1490A225
0C8F91585B168E6C3258239FA070E5A42681AF9FD78883D06300B24C93F9F89E
84F2F618C19DA1A119C1685C37A85A7321841D8A77EC415492B9F74DBC4E26E1
28FADC7D241E661195F59A352CE4567651FAB89E644E237A1940F0F505E4E8B8
ED0AED25A3AA80005B689FA046B7F9558AA69E18C828B7261473E09B57D57B40
424B38FE1CFDB70296637F592A8D8E97A3706FC37B82591042563309A95FBAEE
D6E04C1CEB49E5AFB73DDD21796863F59419D1113B4BEE36E293319BA90A680E
161A94AF3BBBFBC1BA06AD40F1BAD85AF67A194152A7B2848221B044AE6AD64A
9C057A74754140A52A1763D6BF8BCFCD9BB6655B1033965F1BB20C9C28A39A7D
3C093C63ED9BEF530FA85BCFF4CE10185153E28546C13BF879ABDBB6B730C791
5A1F45BB0F41158131879436949B470B449C1DF9CB529F954533E7E71851AF42
50D3C7C2DEB73DAE1D56527B8D693EAB9B5778DDE13443487851ECFB2142FC9D
5BAA5A6E158F7B81D03F4015ECD27D8B9A57FCCD11E0EA94B0DA252B4B8570DC
727079EBD83AF424C62FB90908FA0E890278EDAA426C7D178BE3F6492CAAD497
EFB110C78799B3248F6C15E87E279114C32896897A9524E0E87495E82FA0A9E9
0785947AF67B0C48DE30F2B05433C112AFA9E72FB2D16FF5CA8B977B3EABC57C
77B97130FC9822907A2B6884339875AA973C6E168B7BAC101438017730BF8099
3367254C97144C3BF1349B7FD6E3B1615F1366904F942F4BB8288C631F5DA2A8
06A706F61A7C2A709684EA687DB1D1863DFB4F57A366C08931A86B0BAE890D84
D8921D4982F5A73C4CB0B6BE54F7BCB337D4B0E85A5900D546C9868867C337C9
6A6662DD5A066B73
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE28698258
7F5F423DDB055E4F69C681B6F3BB759F07EF67A4F9E533EFC2F6FE3B5B787B47
63FAE23D9F224BFEF893B679D928FF569C2B2C2A5046F04B812AE899A5E2BCDC
B0AC286709A18943CE10FFD62B4BACCAF183331F284FA436B5D85E225A7923BB
70F764EE27EECAA9B911AD24C53DE5468A97F7C23EEFEC637627A3978DB446EA
10218BC0B75452B689EB00A2434CFEAB677A5F8C9E5A52F8069A8DA10EF3B536
079C4814BD61E171029FFFCDE91E45CD5474BA48287B9FBF5DD01C6568402407
D4F038E494F0BC5F5F2BB0B9AAE48E6DE89A8277426EFCB5EBDAE1E1B220C7A1
A9BBC51230D16A36310717CB0E9FD7FFAD74BC9291490F2B211FC56E8738531F
DEC9DE88F4DCF19BA3FD21540E82526CE9D79E8898AEE96CF0F7BDD9BFBB983A
8E8EFA2B22E221C4EEB1E11CDE63771A4ACDDE5013BD50BFB4BFACA9B27A6A8A
D62F39A21E7EC4FFF53778BA98C6F681D1E474BF6F5DE270234D42907F57A1D0
E9CC5DEA5B3058356D2EBD3AD27FCA940F7396A730380D09AAE4B8CBFCD8DB55
A1675D6098269708F78EE6976FA7A04BEED4ACAC7620A590FEF08530B7AA5394
051C9862F7758F5BDEC06BABBD8DCD76A0CF33F50C0C9CCE9458F063D0F2EB1E
245F7385B0791CF1D0C57C51AC6085CCA752F0AB01664657FE2ECE741F7FAA43
93EDE69991034454484370BD3E8754DAC525CD6C1BC7095B6466208184F861CB
D860E2DB6C0F965687311C73C73B307837CEDCD5FBCBEFC744C39B7CE7C86F3B
DA23448C5A33498E225CCA456008771EFD443FECC8006A66DD3D1444DB222AA3
D7302043884C961D34D37D66E187E567D8D9D9CD79EEA7E3459A7A103FBB21BE
9888EE330506B2217B1A007CB30D50AED7DC2BFEF51616E705C26C4AD450467E
64A62376B852A5037DD457E89AD3483AF9A2A703C47AC22AE5E318BEC4C15596
8114FC4792F54E3D32C02463807784F6921FC7309DC90CDE6FAFD9A004563626
A0A14A99C0EE4924628DA4E2BBA47E4E4DA3D921BDE85E71CE68D8CDFA1593ED
9209D3CF8AB68A05D5E9DCFD1862D4F7D681ABC2A1D3F393CB36319CB91ABCB6
FF267FB3B7331081F8FB4CCFC91F2C88D599FCA38CFCC3D18897177B04454F85
1D10AF5ED003BFA25BC0F222235141A9F045E7B58AED9CABA6490547AFB0EDEC
0DEFB2C7F475A18F12C779F0F3A54AB150357315D7E372D387C11C2D1BB82B85
972597F1E41294DE44B6FB51219527AE33D3A3CC9217BDB39094945133BD0C37
B44F37E6354219D7FA6A96BD7CC3779D1138D49ACF4D73E4C35971B891C1CFA6
E82D0FD9204D5841F097912C59B6673447AD6DFFA20768F0447AB1082D0D349F
1982D5A7F1F45AF7C987DD7904437189F4BF1D06F9A4DE277BBE3D8BF463ADCE
60C409DB94CAB7C319F3B439DA54549181B011B8139D22576FCC9BBA0A8B1C15
752EB4B756736A66A8C949D447433276A9D7FDA296FFA0663CAB2D731F946842
CCCEBE28147F07BFE21AE4681132B3E571C6EF7D1BC905332B0FE51B4D06C4B0
C063EA4C4F91EE55950F6B26AD53517ACAAC9DC9ECF399823AB16F0AF212803E
EE8F6201DF7F28E96247327F8365E779DFAFFF7C139D5F423B149C691B35D82D
524DC7DC93EDEDEF515E3C41861DFCA056544FA36175B398CA73BD354A88E5CD
3D5841A376F027066CA51B14C20CBE10FDE0882662A8B8DF6CFF01043A1F2633
1808E6BEE2BA28B23808E5352B03E6B310FE7EC26B487068435EB0CB77B9D804
9E2E4913298D4E2DD5E34A89652422A3CE31CCC8323F8E41A00EA927E2361B0C
B7E22FF99F504F12DDC033D82DAC17499A8DA1A8713BC9E0A462501D53B8B7BB
1F4122815971239C23AC4B52085C337F6CDCD044EB3E7F1D4C29344DE105C7CB
A03E211E3244C2365A4ABA88D9E17389FE2161A6D9A2BFB14554B0071614A301
741D6F604EC3788236D782152E3F41F8ACF4B04156EBA71CA125126C31FEDF06
6A474CCB8A76083B67EFA59C34E8BC213AA01B1862D866CA2C7F9CA3444464EA
F496186CBAF607A0E7A60E4D8959DE9DD09EFD0EBDC9C4A5AC8B549863CD8914
71FDF3DDCF8B4F113BF0CBBDB7D0E9A668A07469C910C0F183F4E001A3B01B26
98162C3063D53EF7C168AAB5DFB8BB360EB6AB76F320C946A66956AE926A0C27
057AB030E697B9A90D6058E350C75AB91C8B0DD66858F313B0E5364AC07D3357
10429148A45633ACDE061C2AB236C481AF01A3F2BEC2B294FEE42A683BE8E085
AC3C338515E5995DE111FA50B7DA5DD690011608C55D51713726272F61052746
779B7B9DB3140D053BFF94754D9A12763E9C44D8884FCADFAFE50737358D9825
EBD3A31FB7376D828206D9DFCFA966C39A5C026966CCDEC7E6222B48E41528A7
58C0041E7A6954E2C9408472952DC70C1A6ECF2C95A5D49971F824736F40197E
AF08F64A43894A40E3077709616E0DBF4180AFDBED7455EC493803D9E6A9D4AD
F85150DE05EDF2D506C515AD0EB43113EF410C55388C454C8415D63A582DBDD2
8C90528AA9834D2AE17CDDBEE3059DE67A10279EC183EB1F1FF7EA94A4E0547C
89533D4F2D9618C60847E5F9E05185A544E547DBD1C57E7E1E947ED636BEAA26
551938B792816D7993C53484F349EC4E707FEE48D84C98CD046F9CEE2E3F5157
7CA045E5CB0C69950A5D837602444D356D9D8889BCC4957C8E6AA020A071355C
CAC63B378C29840A34637E0F78EB751CF7A63CC84EAD24A868D709A96B1CF8BD
1A3013E17145EB901E8D7E143C81C8E50A716F69DBE3FC651F6E84F9E13D12AE
49F396EE214FDA33588254BFD158EACCBC70BD7BAD9CCB470AEA2818BE1761E5
ED5406978FC4760222A7C851F0539E55B75C25A2D08CB5E22746C589AA1BCB73
2415A8055B9BE09637D5BEA2F63BEE98F456F7B575C0F0867EE1ED9F0C055C5A
76C26853629D419C27AC93288C4C0657D05620F89DAC0A06EEFDD0EB20B7DCE5
09521141C041AE9AB7689E6267CE983816DF2106C013CA1658AEDD94FE92B0BE
62CECF79366898664A83614751CBD17124D042D36B1D0D1DF304B3AA6EC91F59
867CD5DA166A73037839E6316F184BCE8F0FBBAD89976B24339764146201B463
A76EA8C3537D31DDBCBA3EE2AF088E3B42EE6893F77C9A2A66A21CAB229019C2
4B18F1493534F62DD8C99B80730DB73936D15F648C5CC17221E4BF66B2B8AF8C
C01D9A66125F2F3B0F2F588B9A4D50CB52E780BCE7DBB0E71AE50D447A420FFA
522CA6A9F144E67E355A4261692EB09553A33B88D62C7E0F9596CC3B77E78A65
F8FCC31EA36B5509BA9EB59C909257BE7BB00A61971714C1ABD4969D4FCA40A0
CDDBFDD57EA8B28FD635C9D415C1741FC25A031A059A3802853E66C5AF624BDF
E2D30BCCE4FFFCAF52530F5E2A4248F619D51B7E72D224D56FD2CF6D994352E6
9558F1D68CDA9F825E5BFC740708F77D1FC3404CEBB83E41BF6EDC4F7080FB8A
BD3D037E288417C1FCED35ADA2AF81D812561510156CD3A1D2125740CC820F51
DCA2EB1838CE6F273FBE8086AF050A6BBA60ECD02E6C9955C65535C78EA16F0F
516CE30B45C02DA46887EACD204997B96DC19AD0914B0294F39E2E1A3EADF03D
43E141D72A44BEF48B40717DD201BE05F66B1E629CAE39F1904F4EB458C4A8DF
C697E5114D2B79E92A1DFA3AC658D017A04C078EFCCE0B39444F6DEB80B7A3C7
A4571090BB126AA1C6C8864F8D11F9146F7F681446562D1145E63DFA9F20F6B1
6D2FCA9A42EF12AB1AB852BFFD5B4C618240854F496DEA48655AD2691F50751E
1909DF04F9C57FF4698F2D6B1983C6AE88885D8E6294B9E187FCCD2AE31EF92B
F1D5A1966C1787F8710D8CD95821175E17CD29B4161C9C2C8F424037D543733B
3BE211ABCAA5BF5C7CAB23C6CE2DCC91D2398375CDDA9CAAF6C8970C3EE417B5
397B00BC462C93B0BE41BFED47308A21AB9A6A648CACD69CBEE899D326FD1C99
E76419AEDDF7765AD9A38284950C37A82EF3348CC2AE4A662A01700F3BA15B63
DF637547D0AA0C892E5C8F51613154ACBCDA6C6FFFB3E54707DEC332C2729527
72ABD02F2887082F03EEC820F2D561D7D9ED057897F6752AE974AF51AF664E67
F86A338AA3EC34D9BC89D5FE6E5B2764F86ED2CA1952B96A8C0FCAEC43B784B0
91A22946CD274BA44DBDBCEC814F004A6FE4D6F5BD7C2F7D51394140EF798F62
B11643A1DC511C1D3EE2EFBE4BC73CF034759DD5B50E94D20D41C2D936CEC083
CA6510FA7E895BAA10C4A26B392D42BE1439C3760C9C434D87EB6ADEBA7563FF
CD586F6B30A731421F54160A163097C97EA8667AD7C1E49A071B9BECCD391321
E87B43AD35C7D22031F9D4777651C6AB53BAD836BBB1659A01320CFD40D862ED
B09565D8E6898533016BA3CF6E6C415BDEF2105658468C86EA202007CCB56B49
4D6E35D547EA91ECCDAEE51FD7CBE6AFA151D7B88886B0FE5EA38D540D32040E
352FBAEB9984258FC3D4306ABE2B62087897440D277A30CFDAAC43631BEDE2FF
1D791D92717C66D49990FF48F429FC63CB8187F0AE7B6F4A23EAF02DE6D0323F
4E0BF49DA1C1ACA60F366D68FB44384120A75C1F0F9350CAC5597456ECE40B1F
0B13F0DE8F19906B1F3E1D6EEF5D606F8823C6B48A5770101E32DCC7A0DCFC68
0C65B3E11D290DD802DA0D0A9D2F46B931ABD18C9EC06B1F29F9151524B4288B
2E5D4D97F9E99BDAEB405EA3FD9C32D15D8720BDA9D840C20EE3605582DB9B99
D7F50FB8ABF6CEC9C9ED5CDB31F6D7CB352745E8A5E5D023FD721E5AE2E80DA5
D68511133F04FBC73227FBF18A22D5D560B38C2E4FC456FA62BDF1D4F320B7BB
F0C81A618B84D1A9BFA3C18EFD3051E912D8C862128538751FD0FCA9A090B4A2
174478F782AFE96F6DEED6DE3B03DEC6138A88685681366D150CC25F7675DB44
1AB534CBF51FEFF8246657A42AE2FE6C2CE5755F1773D9FF743501E9C2C35604
D7B021C8128CEFBF761B58114CEE51C2C26AA28B4E2053024FFE84BFC6FDD1E1
0BCD7582ADA63F1F2D8CE811A10DB575B37DBE3A9873AB2F6A6C308B981A8EA4
A124B7509CC874B6EE61CBA6EA60C0C6AA542E31810FF437B8E0266B2C8D695A
B7BF8F031988978181FCB5B91014BBE2ADEEA0483EDA1BC296F912B0CE9A48A2
D8203961C21200071458282B501D281F9F92CDB5B1645C25438E637CC31B1264
01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (mtipractice.dvi)
@start /Fa 205[33 50[{}1 58.1154 /CMR7 rf /Fb 129[42
4[41 47 50[61 69[{}4 83.022 /CMMI10 rf /Fc 133[37 44
44 60 44 46 32 33 33 44 46 42 46 69 23 44 1[23 46 42
25 37 46 37 46 42 9[85 6[57 2[76 52 2[30 2[54 1[63 60
1[62 1[39 1[65 2[23 4[42 42 42 42 42 42 1[23 1[23 65
1[32 32 20[42 6[46 12[{}50 83.022 /CMR10 rf /Fd 137[71
1[52 53 55 2[67 75 112 37 2[37 3[61 75 60 1[65 9[139
2[94 3[92 2[128 81 2[50 2[85 88 14[67 3[67 67 67 3[37
44[{}26 119.552 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1150 260 a Fd(Midterm)45
b(I)g(Practice)h(EEE)f(161)798 431 y(W)-11 b(a)l(v)l(es)46
b(and)f(T)-11 b(ransmission)45 b(Lines,)g(F)-11 b(all)46
b(2006)1417 684 y Fc(Instructor:)36 b(Dr.)h(Milica)27
b(Mark)n(o)n(vi)n(\023)-39 b(c)p -68 871 4134 12 v 0
TeXcolorgray 34 1113 a(1.)p 0 TeXcolorgray 41 w(Answ)n(er)27
b(the)h(follo)n(wing)e(questions:)p 0 TeXcolorgray 175
1279 a(\(a\))p 0 TeXcolorgray 42 w(Lo)r(ok)g(at)i(review)f(questions.)p
0 TeXcolorgray 170 1412 a(\(b\))p 0 TeXcolorgray 43 w(F)-7
b(or)27 b(example)g(If)h(electric)f(\014eld)h(is)f(zero)g(at)g(some)g
(p)r(oin)n(t)h(in)g(space)f(do)r(es)g(that)h(mean)f(the)h(absence)f(of)
h(c)n(harges?)p 0 TeXcolorgray 34 1588 a(2.)p 0 TeXcolorgray
41 w(Plot)j(the)i(electric)e(\014eld)h(giv)n(en)f(b)n(y)1301
1567 y Fb(~)1288 1588 y(E)k Fc(=)30 b Fb(x)1526 1558
y Fa(2)1563 1588 y Fb(~)-41 b(x)22 b Fc(+)f Fb(y)1763
1558 y Fa(2)1799 1588 y Fb(~)-41 b(y)r Fc(,)33 b(then)g(\014nd)f(the)g
(c)n(harge)f(distribution)h(that)g(pro)r(duced)f(suc)n(h)h(\014eld?)140
1687 y(Find)c(the)g(p)r(oten)n(tial)g(of)f(p)r(oin)n(t)h(\(1,1\))f(if)i
(the)e(reference)g(p)r(oin)n(t)h(is)f(at)h(\(0,0\).)p
0 TeXcolorgray 34 2090 a(3.)p 0 TeXcolorgray 41 w(Find)j(the)g
(electric)f(\014eld)h(distribution)f(due)h(to)f(a)g(stic)n(k)h(of)f(c)n
(harge)f(placed)h(b)r(et)n(w)n(een)g(x=\(0,0\))g(and)g(x=\(0,1\).)45
b(Deriv)n(e)30 b(all)140 2189 y(equations)d(using)g(Coulom)n(bs)g(La)n
(w.)p 0 TeXcolorgray 34 2592 a(4.)p 0 TeXcolorgray 41
w(A)g(coaxial)e(cable)h(is)g(giv)n(en)g(with)h(t)n(w)n(o)f(concen)n
(trically)e(placed)j(dielectrics,)f(as)g(sho)n(wn.)35
b(What)27 b(is)g(the)f(capacitance)g(of)g(this)140 2691
y(structure?)37 b(If)28 b(a)f(ungrounded)g(metal)h(shell)g(is)f(placed)
h(at)f(a)h(certain)f(distance)g(from)h(the)g(inner)f(electro)r(de,)g
(what)h(will)g(b)r(e)140 2791 y(the)g(capacitance)e(no)n(w?)37
b(Plot)27 b(the)h(magnitude)f(of)h(\014eld)g(and)f(p)r(oten)n(tial)h
(as)f(a)g(function)h(of)g(radius)e(in)i(b)r(oth)g(cases.)p
0 TeXcolorgray 34 3193 a(5.)p 0 TeXcolorgray 41 w(A)g(c)n(harged)e
(spherical)h(shell)g(is)h(placed)f(1m)g(ab)r(o)n(v)n(e)f(a)i(grounded)e
(metal)i(plane.)37 b(Find)28 b(the)g(electric)f(\014eld.)p
0 TeXcolorgray 1979 5741 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
