%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96 Copyright 2007 Radical Eye Software
%%Title: mtii.dvi
%%CreationDate: Wed Nov 12 11:29:50 2008
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMBX12 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o mtii.ps mtii.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2008.11.12:1129
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 19 /acute put
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 68 /D put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F90A32C4175B6BFB279
024EAE1B04D721A6C54FD62484F8949B2CE9B87D9CEE04DFF82BF14931B3CA03
AA5F701B6F80BBCDF2C427C40A51597F0B1BFA25EDD7CE0EAF2EC676BF0059B7
15DD5462BA30DE78A08DD533DC0E8D85F9DAFC5FD842F417265427E0F1B71834
D2BF6EFAC3CCC40D3EF3B2E2080F148441BA45E5D0C0F7D8416730AF4BE4FC93
1E965594E0364F0D4F1EC48004CEBDDAFB1F0EE0A8222358EAC0F62E6BFA3C9F
46875EB4C999219B91E6147A49A668505667030CDF3495682B79C0F614AAEE68
D976EFCDCB04127C0D7325A2211E49CD316935A0B472D1F9FFC68F7FBEBC7269
79DE858914A95826CB2A8F0F17773C8DCBF6481A19CA03EBE2F1EEE59A3D6E3F
C23B65AED2429ACE7D1CA1F45B06D9C952F6E026953949028A6B7A4138666C7B
0A7B10F10DA7017B72F57DC4971A485ECAA7CBB1F832A94E176F8B529878D4C5
E8A0F09E2150921985A94BDE6B1666471A95740E5F6371C4D75613C7B412A1C1
38FFDD146B0B64AD4F04A51631C5EB5ED7C8166670286773276A7C5E9B160FF1
0E3274DE717BB73FB3C4A0C2593CE3874702EE51D15B14730C7BE579410027C0
B70BCD5F437BF4593B1BCCFCEDA9577FB496F37541C6448D322774EC3C021801
FC7A6AEF112861D3ADD32110E3A2915DAF37CB6F008A8F7E4FD4A8C6E96B9414
258A2189332E8E6802E38F29CD624C64ACFF8567327FCE6E1CF8C77FC994DD35
3EED2DAE0DDCBF057AF073D9AEA4D7F574DF7F06BBB03621AE24504F2E921D25
54674A7769A21B47A2AAC552D964ED54BFA454496C721A3C89F77556F25A28EA
590AD47310066954EA61791529FD50EC8C33DCB111B20801D33BEDC50555431B
1DE47FB8710389E4004B75661CFF5E1D1550A313D6AF0588FF2E3F90B57D77F6
223CFC964C825B0A111DE5E7718E16218B78765EE60502B5D1B27218D82EC626
C936209AAE5D9735BBF8799A87D628F440813C9E50D16B19FD789C44A5DF0289
57223845CAE007E763A283AC80845BC772803943EC624C2EA5CBAB5071A3011A
AE267A5E8E531D72465CA8C29B09675823D31B5D2BD10C724C682B7E76F48612
2E8FD079E4A38E3F406051271706C161EBF61ACEDBD59AB58372EF4D4C1E27E7
EC1118E3BE626AE3FED1A15128E7C3C9FCBAB46E32BA7D168D6E39BBE1FAB3AF
9092F0767F0D69039FFBC0C3600CF9FBE031631338706E51106E1E8C1D8F85BE
0CAF94442EE9029BD66526CBA20F7C20B011C69A88276BAA6F336C7D93526D61
6405F2CA18C7C5FF2E1F2895057F1AECF0F4D70F73FCA9F2D5D1A1C0C912D49F
418D6A3ED0C42556A0323D1BC7186D31A7ACD60690FBE2F4FC230280F4A06E27
3E54FFAB005B001657952ED3F4AD9817CC986EE3752B8DFEBC8073F3BF597472
3A02BAA1E9E6723AB166FDDC784F6D52A3453F724E008ECAE657E976FCA5BE95
71A7EF24169B74727955598A7E593C35D5D31E3B36AECFE0458F1456C525933D
26B7B969EF16CDB90077E7E69345E1B2E31B846452923E6238C5FB639EB6458D
684612B95291F6C82A68498C39770D5D9C23AA4E467236C21FDBD8A04181346C
D4AB95E5C2621F297103D3B43E62045DB1448D29D633B37DC5F3500D112D7338
70AB85D067D45C830859AA113D8320A08411842E17412AEA1032551E65624974
975CC73F55222BFEA5CB9B4EB9F5402F5D3207D9C75917CB022F5C3695DBE4A5
59D4CC72E1EBFA2FF871A9EE7D25ADD934E836211B1993D57554EAA576D42D7B
36C8B74B126DDA1B7AD88E5A2A716E1468622D0C800F3E453189AC7DEDA4FEB2
6EF19153CC28FCCDBED38E3D2DEEA185A523773CDF631AAF51260BB8B56F3D96
BDB5DCFE4C8904030D88B194EDB28915052C81B973727DA7EA11004C2B92A294
DEED7E6F846D68EEA63411A2AEEFF56CB60E42A48007418FAD5E9BCAC61467E3
54C91D4747539A65506048910AA2CA5775FE7D78FAA856E64BB50E269BB6A8D2
1C1725C452F97A11B406390B7AC28676A39822E01C81A1B8845E66D437AF8BA2
4CCDDE22B03CED2DDB411DA6A6D63AFF5DF94980E3F4AC0998A9730370F36D37
B0B343B92E15AAF254857E41813E4A7FD60DAB3D4D5AB5FBA66AD7C0F5A61E8E
7A3D090C10872D981DC1A31EAC8F73DEAF7612A90591060BBC893AB501F69371
64E134B74453022CF058FB765028368FF7CC30D86A941941C9D220C92268A489
AD1638C8508F740EBB752760DDB92B230B995D46F0D792646A0A4BF655D2A72E
03DEFACD2CFA11375CA8B1E1C2A2355A74AB122586F0650814B299C4A99C3F0A
83E5EC0362FDBB9AF3D004E2A5B10034318F4BF840939B311684C9D1857016B6
BD9D49A8B7AAB8238C8016C734ECDABACF8B4FBFB820958E2453B06017C2E78F
CC2DA8D6964D3E5E3E5298AF8CEFC8ED0CFB25FFFB139C14D2CCFC182DDF591E
495A63E62078EBFC50EFBFFCCAF65BA2C5DD065BD6F244D126B0D07EBD6669A2
C9CA77029B87B06808FDC404C06E15F3EDB88FC256FA91DDD2BC95C204A37AC6
9A4551D36B971387A78C7BDA65CB1FF2EB4693D6EBD78E3A23A40DE84ECCBB4C
6F2FDBB15826E9827DA7F389A4D15E1CB4A6263F82E752E5D2B3DB120495B1E7
3BFE9076AB8B185B7BBD1DF6B1A3044DA73706C354415A58EAC7D43705BF303C
A61ECCEFA47D95F2B4EBF75B12A93FBBE2751AFB7A2085554EBD53B738E2201B
8A53831382F042168E7C30B793D01184A987B59D490FBC4CF1DADFA6824A4769
70D81C8E66751565368E62C9AB8939EB6976F0B8F4A48737E9FC24B5AA703F6B
DAAC06CDF967EF2872CA7A3E4C290838BF328448AA86C2717F7B974375C25B08
7864139900FF4450D5A1CE6C85ED13BE9A4C3D5B2E27453A290C392D844A15C1
AD93707A6719ACC77460F834111889F8D22F64162EA6E5CAF42B3D36BA840683
0A0416E19DD63062FEC14C4487FFAEAA293D8DF21D9851AE66D5F926DCA49F3E
EF3D0CC41C223D884483E1E1D6DFE3CADA9E334858CE0ACFF18C66B406AC3702
2AB898B704586498900F083582E8BF85235A9CDB6ABE118061DD5020A4144A0C
E367892191E576CF83FAD4CA00D35F296570FC71AEEC3FBB77A8442F82BC4273
FEC3C5502046892B17C10407F6468C27D335C69DC9308A7AFFA731D06740B951
01690EEDE9CF241F158EEC55A554D007409B75D2F899CC15A5AF0827F610C058
28806B7118D59DED69179103F81D8188399BEA54BF0C5DBBD8B11C26AAE199E2
07278EC8ED4664255CD4F406F11B16102A0D680E1066B8095D4A91DE98B5E163
72A7EEA275E842C2BC37BDB1DCCF858DCD996ECA35210114B296F3442A4CF3EE
6126DEE418694A5C6D46ED03D138DCAE2BDAC662C6C083993E0063D58D82E883
834E7D5E7E0F4C3D75D630AD743E482C16B701972954F46DE705E5E1FD8E9D3D
2419D1B7E8A57EDD76699194A52419B91BCC357E035550D93FDBAE325B417E0B
E5E0F9B5948F246E39B56F3890705518D6680F0C59C9B9BC772E38E6268C5751
481E9A9BB47F1A3E7F5E306BCFFB007F8920B77C15453121DCBB404DD51927BF
850E7490D2A60A281E7BFE94B5B2BD213CA3941D273DDC3D405CDD2755FD878C
CB0B1ED9B26A18F692C7C0F37BEACF9D5FCC0DD8255FA20F19ACAB4F3D475DA4
78E2D0B5E6E00ABA41E473A4DFECEBF62F706C470D1C5AB746A7F30A084C8924
C9AF089D76A3F81477D26887377A7F1D9733B99A56F2B5BDD6EFBAB774D6B577
75567085B09006EB7725A53E941A2644E5E866B47910440A1F7B1C240CD12A88
018624EB6A0460B793C0BB744DB3E45C9A7C9B1C741723E86ABAD50732C3FD64
1D2AB556A97998FD6C5B45C30389C3E5FAADF75C8013E1C3E1E46A3DA80A6114
C9609871FC455059270B1D5F3759A72671551720744346F2C2FF87554B005759
6AAC00FE0A2A4FE55B764946F32B087BF78F1490560694FD83EC857064B9C95F
957672D267274885703F350140607D25083AAB3CA1433AAFDE10CD047F4D8FF7
5921BBAE701AA0E29001AF8A36DA19308140A5E7104771CC22F81BBBC43FE2D4
4D4C9F1C09F77BAD8D55DE9255DB8E107B8742D197D9996ACF2ED1E4D7A20629
62A78BD4832CCA6C8E8090F7060E364452211A6C015492250E03953B121F480A
9F2CB3AD07B3B3D4FF76EDC61551E2A8FA48680496804451FDA582BF17767F4B
E6EC3C029FE60B62808A0BE916FEDB55F1348ACD3B30474D672DD780B95FB0EC
FC1B8BB3400A153CDF568AF4A01A813637B054677CAA4BDD971A6AAE06BB5C94
5EF21DFD098FA7B78BA72211DDA0E9BD2B837E1688F305874BC89A8F2BD1CBB6
10D9D5514A10366810979F329A6DE9F88694298F97D181DD11FD53E47C06E9E0
4F897661DDE89E5EE125B05C26E41557B31A5864D2EDD965389D5F2B5FC03099
7DBB47BF1FE9EA8844E7337F6AF0A4BB339DB831182F0267B3C4B5BE41D3D2E4
978D2701F4AF2C200151DF18031D1AE8DC9A38590E003BABFC6B07E3B998FE1F
A4379AB686D8957349B2ED53310E880D8836E39071FDCD44F64EEA751E5216C6
CEAFDADEB018B6737DF4F8E0A6824880711CA7B91162CD774ACBE9D7B9967D98
F5DB44CF47D737505E89CEF82AB603C276AFA63B0AD9C6AAA4547E350C21ECB0
884221E0ED707C87258A5C7C28D428B5AC4D98ACD0637E2FD33D033D44819C99
530F1B44325FD4D6D04F28A8D0C36C95417BFB8EAD78B5EF8F6F1A600E198477
FBBCE7D8097E39DF9649AE6B173B8E9A0CF100BE48B4CC3E86CCCEF865A3FC57
8DDB972DD145BE35E626081607C0D1062B5983DB9FB5911FB90FBC6C21E58E6C
5FFD478D21BB86E2475CD79293866B16E4A25E8CCF92E1CBCFF9CE0CAEEE67C4
CBB0F1D224E18B38936E167588717476AC05B97220A6D6C3CFCAEC2616536B62
5D4050F886AC80F66DFD6B7C858A508B48298906F61CF961ED70A5AA33C21F19
1A0042890D737220A30FA85E2A6FF72E9D1F859A8D4C3BDACED71711B8A0BFB7
28E0B5A438B7DE0B7AEA33313C4B9D7F5755B3872F9175D3F2AD751C86D6AD19
C87120B00D79A62755626F11D7B8F8A01D10B1353C5F7E6781124C3785CC5CAA
9B346415B7145EE251C2CA246A456F2EA5D473AAAEBFF5136A971DC5A8F33C13
923A3ECC305D9703B099FE824631C41D246F1C36FF155B02A25C09AC72892E58
DA496F2A90434C52AA109954FC5354B17D5E9C36AED8D742DE4ED629A66B0B27
FF00C33B58F3278BACF392AFEB40A25CEF3165142072911FADABFAB137A29E4E
1A1FC221613DC451B215C69CB0CA3D3ECF4E9DAD86D97DB49DC0DFCC9AD4E40F
555DDAF8129BF0C806D44594FE5216F7B312539EC1B03F0363D17626E8CCA2F9
F626D515E1EDA87B8C04EA71DEE0BD994732FA7EAB2E00585E4F01EFFD347BB7
CAABBB7EABEF00049007D2F0D6FFFE992ABC7109F64147C972845D400A977638
D0D3D58092B3CA65ACB90D85F2F80BC0F13FE9C8C97CDD980D60237A2C9149FA
08814C39FF622498B174E0B761DAA65403F62C0212D04A1E4F6877B9BA8CD0DA
25E6AAA698623DD1CEEF9B56331040130404A069ED5155F4FCA4112CF46FA9FC
0D250360033C7969EBCE47CCD6AE3D72E34AB07B36558A70B553A945E42ABA67
11D6AE53F5601ED083154B32E53AD1B6633125869FD415D7EC91AC7CB1CE09D4
E02907D064B4F008FDB018CC4B7031D39A103243D81BB0DAD396DB93E1CECDDA
E5683B4F036F6DAF5C89876A75249BC2D3F30007E1E5C04758B986D07F61E761
5C7A3F229B6688BF7497AD97AE9067581DD43C5E190F7D619B92384480D3098D
82FC62E1FF99BF0450BA8745246C96F6A2D5433331E146F20C0C636ACED61C3D
DA35D03F654F057F6CE86DED61FFAB498216D136A047B744B2F362213763C4A8
ED4227D11D2415700F67BAD537AC0090DD6C3C30A89D6A449ECE57DEE39A6263
8649F3B1442BD9CDEFF75231A16B825FA7092A677791EB231A70F3FB95876C06
35EEB10DC75F1A6083C491E69F41ABCBD8713BEB733087A54782CFB00D5A74A1
60598862777E94F1B8E81FF2566229F8BCD29F7C648200AF675A9DB965DA047D
191575DAAEE39D7C9692FC98A61142974671F4711D4339B41FB2F5CEE888BBE6
3EF66DE3598660DE4C56710D250C3558268D7575D86FDE1233DB5CAD320548C3
DA8FD239DA82C33D87B462DC925E3D33BE45FFEED9FDFB22867FBD60D32F58DD
B124B549D494A1F3C5BA8CE4CE3B21961FE115A3049FD3CA5FBE4B99E63EBE0D
419FAB0E0B8309BE3FFBBBD9A285BEF5AC3449F8F309F7E7F8F004C60DA57BA4
25BE52E875D3394BBABA6B3943513A559FD510DBC1604D7813D5DBCF4AD072F8
FEAA46ECB8B033F5F950B9B2EB2E13C3391DDA7CE4A8A486D3A67651F3D5B528
07862C0AEFA82759E5EAD952FA4B63418F87416C2F791C02BBD39312E37919F3
4EE14904949525D87050AB69BE085F844511E57EB153168BBF5EF00785ADF26F
07ECFFF19473082EA3C29AB3D35C5A768CB488E506417530C78B0661F5826BF8
CBC535BF4E431FEBEDB76A1540AE6F222C0736FC10BD7FB5460C87EA46861889
741A86C0DB791C1BBE61F91D392138B95E2B27C32D4C285CBC16DC0E1DB984CC
A751BD3FC2F369C030B6B4A3AAC1629247FAD98B9F1DC4FA5C591431AA5ED733
0589D9614F18B05567B9185984D6642E433E839722C8BCB97275F9A0B409204A
FFA753452C3CF3ADAD67DC3055EAB51DF10051B5946F491309504F3F03740892
63AA39BB831FEA13FBDD0D0615677BA9CD1E22FADC72D3563882C76CC3C9CF76
A9D5BB34B19D2F9B8681D7D14D0BF2DF836BEFF6B35CCCEF077DA09CECD7FA75
8CA8237ACD8B0A0CC20A6829CA2B6FD170964F8901DEED0185F647DC4683901A
3817C41B62BB6942B03C4A1EC6EF0BEB4181F771DDF66CDE4239E4C46D088B30
5F843AA3916353532602D45C399457703FD70EDA27AD19CB2541CF6EAAB43049
31D4B82A6E16D02B6EE3F61105A0A0C65273D1FF9B2A9635C88FD90292D4BFFB
BA348AC4C9C45B2CD930C7BD00CE587A4F21C457B8645B9A2DC5EFA26D01125E
414FF8B3407F1B4B4C2B8E48927C8551D7E126B69718A0EA7A3BA6E398DB1F94
9ED875A41C2232AEDFDB0608D0A964C5A2FF371C492454812F0B5C7B72B1A9E3
43D55DC12521DA1086B68594931943AA6F26F2144F123BE5D0E6AC08DACBFA8A
6841D118EAE7C16000E9AD80E3CB43F360214BA618285ED8652D2976AFC1BB34
02B1B7F84CA5F436AD5499ED0515DC2EC6DDB9414FB98895968898F95B40E884
A1EEC82EAC613F5FEDD7E3A8CD3C13D7CE673F1E80B6DA95C777D146CF25DA9F
FC01BE57298EB460C9079EC4B3B84E88B78FF5AE1D7FD482DD7B90A3D8AD6E95
3AF9EB55178F69F8176F027376D9B1BE293A81D9892A881ACB2D0C962D7FF093
89DAE2C86E7E3D02D7A85B382D9CE281D0C4A56F86FF86557E89AB1BF95497FE
C8590219ADC9E85E38080DEE5CACE1E9AAAE4084F0A23EC91D430691546F3F8F
5DE45A5FEE3BD1157B41EF149FC435163F60E256C9EDE58B22474F90B7FD413E
F574802DD954B78D1E0251CAC7FA01B8CE5D65D3051AD13CCF487F4BC9542F96
55624F374AD2FD9DE148B82CB0A589C76076F4F04D5922C687E92675A46955FC
45B7ACE775C5E9B2A4456EA47AC5037F49CBC81FD8000366D7DEA4520C3803D1
2EEE523B3927D02D17D355512E961DDD603CF8EEF9F2E6FDB42271DD11690AC2
3364A1F46F5678A83CC0CD02EC738C1169ACA3A29325911D82FC1E952095A1D6
77CECB1479661064C18880EABE3B4B35F8494E4527E58CBD94BB453347C716F3
F3AE2BF6D51A2422BFA536904BDDC7E00FE99A1D9C0AD0CB06B5F6A2B9C1A7C2
8EA1DD5D5D6195F064CB62722F8E0368AA03333E7DD00C31C00FF66B72595462
82137953CDBDEDA0DB6353A37AFD854603B2EF993BC5FC746DBE6777BCAA2D3D
3DA7B4DB8E642D24EF6BB1D5054BC2BAB8C754B2D1D4C99D812709D2EDE953CC
3EBA7A79D7C016D052CEB8E939174066108E30DF7214468223FAF43BB39B8FE9
8E6AC8DFAF1F58C865173D46DDB50599F0EA0CDA647920D508174D95400AC771
B80E0B454D751AD11BA65F3E2AB4DF2386E89CBA53E82AD0180FB4A6A94EAA98
4CAAAD35339177CF6AA79001F21715123678640F87D075F3DB2544B3C36026CB
2B65AD76C1338C4116DA97A36982B2F3A1ADBB514177200486C3DBC36F919BBF
FC62857D9B5BC0B54EBB101A0E512813AB02B4C8BB9C7CA4B640801B81621140
ACE0E0A512A9CAB6F0EBF7CFB16D6086DFE4EF243DA49305D6AE596C99601FD5
471553C8FD50BB8602E309A5D0C14B01AD3AB4F23816F96D56A690C460D44DB1
D8FCD6435777ABF53F9836F7AA25056FE979E51583391CFDD168E02040781A5B
B6E67C792FFE59ECACBC1C505DE84570CD96352BC70120B996088DA7675FCBAC
C6325E18CF8940D61E5C8F3CE10232BE518487188F81F0538C1D7567AF5D7C82
8A6D7E7A1898964C6139B495E33EE296FA2310F9058B6C4941A827960EF0B1FB
605A35030330606E834E8DDAE945F3A6F5B4D38079A1EC447F40729A081486D5
8111D1F9913969F5D2B9E9E0846F6383373770C1CF80E1B6853CEF33CE14EF0A
FF75B37335A9F23B82EE0F18710C59DA0BD4ACC84B87E2DAF264615EBCBCDC4F
0DC855AC98D804B767C7EBE8CF6E80FD25FF80178E3B549D31196AA761E17BC2
87FF280D386C02CD1D93B845E47BC60301E14B4B89FD3A8F940A9F6DB7D3E3B8
5FC752C6E1975B61CEB36092D6BEDDE4914D3D4B9C568224B1BE8F60424772DF
2986BA76139DB2A15B8EB3C6CE7813B8BB4E40F412D487CF4C70B9ADBA89B917
BA2B44B5BF3FFF5310D7BC1F67E58B7CD35BCE2CBA684750067DAE08B1A50AB6
0FBFF4A4B4E35907A65B66775C784F457F5CBF62476211BB57F0B3E5CBE2DA8C
63DC07AB2405CB4CF1AA6482B1EEF45FEAAB8985811FE55D7A72AFF78F48CA91
11D09FC5A5B6F5F6C4205928D77DB6F5213C3DB85C82480ADF46D5B81FB8560E
277CDE20B7ADD49E236279FEFC7C25911311FC499015012B046F88B855390DF3
187D5B15B913A02D03589A767E9D277F27C3B9E75EF5607049F9354B9DA8802D
8840F1CADB236799DCB0DAF058E91205C59BAFF1206D0CCC03208FC6ECEECF95
36D44373CD6004BF3BD552006E41A16A75F3D25EF72270B463F8DC111B3F8DFD
7D71AB7C3A07EFF21D2C0CA429EEAA673C65A279E8DC097436169AEB7980EA34
44FBC6A3524CED3F1D5953E993DB34385D83012477E0C57A63E8428244681689
529C762952C467F5A87121C7FBA1A843EA1DAE1BF585307182132EA145CD32C2
6FC8932FE5C86579E2D5D963C8993D2076501AC0DE801D31906E78C14239BBF8
DF13AEDF83B7F0DC09BE10DDA9B4D7E815F72F73A6781AE6DC7B2CC3A5E99D80
0A1CF367FD96D198F9706F47590F3C6DF663FC7B7AC6A29960895EB28F549DFE
443A0644B309FE666899F7DC6CCCF6B9B0E0055CA1C5861DF7E56FF0EA95ADC2
56D8AB06A41DA14901ED1E8B22B562E0518865D91E8BDD6BD41BA8F85D8E927C
9780E5D2CFD3F5391B6FFD32D4F5A94BAA1751D1AF812E43BF09774D3F3F47C0
1C3603BBE3B3BF55DFBFC0FC7ED11E4BBBE09B2E950A22A34C3DE30B0CDE5964
B44E6A1B47FCE04AFC36D641BBC478642685B5D77C961E911A47B62AA9CE38C5
A3676D443AA3E63054F2912A2A4EB5A3B5D7F96EDBDD8D6E07D8BE0E022DE8FE
CE7FAE76A3EE65CDA9EC340D70F2D79A178310E7C24495114741B71A7390D185
C7436EE13873926E22DAA1C2798E96988D2ECF3BF3C3B71DEA2B552BB99EFBA0
FC847A197FE1E261F929AE7130B39CFCA961750E704C3C83DF2D20C1E0BBC601
D5220C17496C49863780C19DA5E3D73F0A1C24D24E66379EB2703FF87A840219
E10990E2B1D7F132A6F055A909188A00A89A20D1CAC4EC68B0A8B66D9DF3C192
D8B08EF5736CD85B10FD8D0BA22C58A80966692405C8FC96E3E5C3C66ED492D0
0D8AE84C84191AA9789C84CD109BA6752D999B88652AED706A9185A01664C086
BC08D6A65AB42C54AA059D9045D23DE370F7A37B4FB8DA27DCA0E14AD0BB5060
AD859B62EC9FEC4464693A1DB802D5B5EE6894276F6DEE07D664EE2AC4B2CCE0
A92D7F77B6BE331512DA95953A24908EF46E8C0ED75E77CC1AA448054CB2A1F8
CEDCA2BB4DA3ACF3318B311841DFC78346FD9FA4725D532A545396BED4F5FFCF
3327146B0780CAB608747A6A832359B22DF36CAA89A6410E6F08B943D5508C5D
4AA6C3B406448E0CF17090282B79BA279CA18775AD6C1E8B1EC6316DD2CA1010
44FA327D33FBFE786609D8F8D06948D81A95525C1F459C3DEB284CE7859D361B
74ADBB90E470C2F9748B1A67B204ABF537A98088070A66787581B88E1BE61305
521B8CAE48ED27CA8BFD6A6D12F6D855877BBE313200F15F98CEF1CD4D4391FE
179C5701E63F5847AAC871F7DDD1A3BEF342530C31C033D65934BC3B9A25219E
0AA40BF12B01DB3F69C7B5F3394E250D1D53395F0DE30097C4C3207551E30DDC
229FB3AA3CE0683A6FB9796D6E8B703C809EC11917A224AB55FA94BDAC53F307
75FC3B542A4DF95F22CB6F38628BE9ECCA4B94373A2B04AAC7CB136767D942CC
F7E33E203A8C9192B36E50B85CD7547ABC097B762C858366C460A3C82DF70129
4947A2787B5095BAA96380D87E85887272F9309C4314EB0183F571C362CDEAF2
E76D6CEEA3865E103F23814CA415C96492937D03751460014A0DF02CBC2F516C
26549440EA0C7D5970A21DBA35C258B0FBCC6D24238F531E7043132390FADA1A
805CF74627AEBE07210E4A9D11F7578D901463B4C323339B7721
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE2868F3A4
2352E5885B6D22FDA67371E767DC788521A4AB01BB4CC5518080E63793343E56
E6C98B19C52986114C8E155074952E991D91F60238BB029A20F816FE3E711015
0972940848E8F8C6B96F8EC91BC7E821F65D9D0EA9ED5339BD987AB84C6EDC01
7FEE5B8417D59BDF695DA50225119FD9030F9E306C400DCEFCA2717676AEB1EA
52B608382110AB758705D8FD69438BDAD2E40E6A4AB55CB9A1F9573356B8D467
89BB186B25E1A11CFEB9ACA20D6E45F87B8EF1EF3AC510D5B89A311EE5EE5FA3
1CDB9A1B1D0F63EDFD9518D4EFFBD3BCAEBA37B9B4906AD9FBDBCB5188799D2E
C6CB45DF16864D1D362CFAAC8EE1B4F50E76CF49FC8F48F29B7F3C6248E9473D
26CA59A2B96C07B3CEFF4E81F086ED53427F4A32E35AECE53639B285A7D8902C
5DF58BD6F103D53C9BE3DFAB533047677C72313A1714FED3769FA0883B72758C
C24854DF5BD5B927639C05BDEAC7C4A0AF7E4840DD7380036C7946A396DCCD66
F9AF6CF82C15E60A7AD9069C40721F480782C1FFA831CC2D80FF299BCA23BAAF
7F69B1671F7397107752A734BC7D0B306243442E6EF834B62AA8B1C9B69B77C3
2A2828C9D1F61D726AEB87A20DE937576E40BCFE8C99325D41AA06CFDF3136E0
37FDC1C625BED939E2E09BEFD8E5BB0AC17E1E5097A63D7E1D927D3252D36E2A
15F8F6E37C17616C8F44713C9C7870A38C7A46DBFFCB6720FF3E9EF08479C511
38C939FA690605C2D5714AE53F3E4003D33797F5567D2C4AA0D5A140439615D2
6D5F941C1D7DB91FAD1D16596037AA4F7119802970546EB66D836801A9A091BE
66AA87E933120ED918C356740F2D0A78CF861D2AED1717D6BF8D0C58C9D5A379
4F7FB95D88427F3176ADE959B9888546708FA20C31C8CB6EA4F0FB5C5E895FEB
267F9FF9BC753579B6F35DAFF028B86ED67374CA1AEC8AE4FE53A2458DEE2AC6
EEF734CB05629D7A72DDFBC9FCB81ACF98A0B9B2D338B7A08B863AD64BA7B3AB
0022DE11D9D1AE6EDC2C832E6DA928A403E0D65AB1044F7528A7198FD3C41FBB
66EEE60061BAC07096DD04F4A00A267798FBC6391A5CC12E7699E7FD65425C54
52DFCB9E33A707F09BFAFD822369692E7D69A79C806CC724423A1BB5A4429EF1
B20C327BBCC1A23CEA04CD046E41B535DC5E8A04AE561EDFDA04102E8FE05C41
53DA5F3763B0991B8A5041B4BE291D4C7861CDCCFE3EA874B5B348B5DE104ED0
2DA392B2CAEE602F88B5E90F3C4C1E1ACC87D382152B8D796B2C6CA276499331
9D753ABC028D717735E68EAADBDB274A2F66EF09ECA2FA311B6A50896AFACD17
2306DF4FF58613F9F5A1096159D43A0F0A016A5AE296D5818CE4C2DDDB4B78E7
60830BD2BA72C4D3C28675E0A44501BDEF4E6A5498605FBC467331DFA93B4682
3EAB482D5209BB62CF76AE1B4C48D97C0D551015770E817D806A5D146290F934
EC452B429A8421AD2390D6814DD3CA3F64E78A2B8018FE2812ABED0D0630B00B
225EEEE70A9E53E8EED0217160A051E5B7DA36B5E34482CF9755E9D03DD5F48D
168A627F12B8B749749C01C214503C7CE57108BF138E7CE5AAA49F797A6E8C6C
C686B1060099495F7BEC7ED92E458367DAF3DE1DF67198A079AE474398ACEC13
3F98A07BA658A7BE13FE627F3AF9CC1B49940A23282F0B9FBCA74ECF87EBEB47
BBE4D4EC4501F473796DCC88A6153E4C78E182ACA50A8EA491B31E74A41487B6
CC4F61753BA86E1ECBC6182B5979B412A620AECD1753889113B6886C14061424
06ACAEB78DCA4A6FD50F957D22B49B1D75A4AE434EBB1555F38A15369919EDBD
A46E9DD3CBD14898B12FDD07DFAF39F76ACDB161542809C5100A80391350F73C
AF81BC5CA32882771C26E4F05FBCDE23085D3D95BF07375F43A91AE99401E1ED
30B50D9E6D63A57B011E98BF0639FD4FC430EE94905C71856CB31D31A50604A3
52AE3D81C534B6BB51109232CBCF86D01A02747D24A397BF0C0BD5DF3F34B646
5D5FC70FD226E8A9CED609F4CE9DEAC4B87E012D62E82D1A8D821B776BD90861
7962EB91975A73424887A8FF1D2501533F5C9B2718F9EC04FDBD5A8CF04F0DCD
5EF8E5BC4643EE6863334E0AA162A05FAE560D6A4EEC3DFA67FC98A12561A9D1
E8377B765F913084E9FC143736E60E13E38477359CEEB3F7FC0A86C57391258E
B0DC994C2C70EAD7DF3CB67BFF675A433B0BE604ABC8A5022F73B2929BA44339
3A13DF7F0434BB3B648D447D16C6A581F0917DB2BAC4D5E41E2717E8040E72B9
FB27ACECCE1D9BDD02B36AE34902E2F79F8CBD378DE9F7BBA872C0B1BC9D91F3
04838A18A5F568FB03AECF76BEA69CF9581F6FF60012AD8842CA4D5FC57591B5
D4A717EE892F79F776A1AE099076D70DE6152C8B0FE938E66A3FC5E96DB0C629
D2457DD9D6A958993AAA2C044D0A9F4505EDC4BA239B9E91B2C5E619093F0D0D
CFD1424CA73D4C97443F0FB9DC1D8398A04522BC3562AF163D7051B2727D446F
A100AD1B0E48DB7F0D6283B8EE11DE98A85D91607779F1757E15B0030391AA13
39FAB46ED8CB2267BEFE8B05610811C5FE917BBC5FB5AEB181E2D07E7614389C
81764CBBC83646244347FAC5978B28958C539B0AD93E6C09655C5DD36EAE16D6
2E8EAA82EFA009DD4995F062A96BCC9377F4F80FCD27DB6C9053BEB66A299A46
0A2E4934525E0CCD9A074334618E0749D248FFD39CC576D95BF9157416122B80
E2A7ABE84B05811FBA71356E08CBB6CC6AFBF8B4D06588E35B9B0C8166E4F1ED
E2E1299F0EC8CA70069AF94EA29E2BED46B6A593399AA5CF467CB4D222A30989
D36AB4A88B20791E07DF1B536DE091F96C0383677CF37AC9486E5719A715705C
E6C3092F6C4F10D54CD0BACC68483D8462367D5019DB29ED39596FE856B92424
E1A6E7E0D2157CCE0262C06E4C41174083A4A5431B016A0C0FFF64CB5057B9EF
CF51E162BA547935D572EC11C6EDD5D2ECDD4F7BD8EC630436F4A3EF678E2E2F
062B2372100D4FE98F6C6C6922571D6A9625DAA40B4A306A56B43388FF6C0794
82201464668F6B42F15A245EDB72CE0A57DED22396978AC31F15AA523AA39E4D
B5E6C17B9EF9D6FFB98DB93E094A7DE7B4E23DA53FAC2E4846A0D7176B02B870
140736317FEC6A92539B0584CD6668D60357B39EDF9ECC2797D08D434C7A2008
C387291E13C32C4741511DC58C18AFBE22B51E66D1B904D47858E14283E3D81F
01B9EB5E4B1C273CB023A03B560D5C874C00CA78EA8552D9197C19AB3979FCF4
0FE15D5679C501E57C5577BC2C0A4B96DAA52E6CF8EDD6A429938D93A7D0140B
AF84667D0440EDD728A389CF939DCF55DC459C38E1DEF5F7A1C96C452D2FBEF2
F1725A602C7D70AA8EF9595B390878E76EC265BE98FCB4DA27CBCD5F1A632C4A
50D58DE418E1D260DD998A8A851E1B4ECE89E84B68AC8C9FFA56FF8736C8BDC3
D04AAA03D24792DBBBF495F5F94CEF8681A83D2D0590D3EF2BBD0A9C2082FF45
727763CD21A5E0946A55B588F3F304144C32BFC7C4356ED57C4B00E2E5347A57
B6DE6413C55CFA399171AFE2A15599FD5FFFE040C1516AAC6767358ED5A67C4D
7F5F014E022EB294866966F09637273FB2A106679FE4163F72638CADF6AC6E1C
4B226AEBB1F716AF051EF728C3EC329F816599F93A5AAAB482A29645F3661ACD
9994518FA99867199B2E434A99404A8846482049273B6D58F7452272F8A101D6
0012B82C003286612D197810E0013381F84952571DA124E42F3D41368C42BD63
14A3C8A172BFF041B57A68613A11041F8DDAF44F36E8AB5F6B403781EF10D391
7E6FF30BF70C80BC7B6289CDA45D2E5B771BE24F0BEE5810FE5AD4BD05EB1B76
24729B0A0DB66A2BE8B366315223029156028B94AC3BC1FF3D14A0E28CA306FD
169D50AA5E4A8E73618878B100E64B097DAB9768E7AEC1E4940E260CD4BFEFF2
F60F31ED6B4F4CF82C58C6F666CCAEF050C2702AC8AA797FCE53BFE467AD0DAA
1AB7A75C3D6BBB339FFA8BD2EB5EAE9926AED229C8736D295EF90F3E5757B54A
A74A3A9AF4CE8B0AD9DCF6EA65A147B32BE48D1E8CE664E4B8867A1598C52954
2020F773087E6A9720308188C2F8398E73C1EA684DF59803E97487ABE754041E
D25A16720A8B64C7328FC949CDAA7046B126A261B88448ACAFE933F447797470
1F1DD88711EA9BCFE45C032011CED4FF888C4A7372203F7CB49D0A537380AD21
4FEB84A33F859ED2AD3E58495FE1C3F06A7BBE1A164B17EED43E56667E3D0948
4AD1A15C7FA98E82B7D30C3F4E1961ECC261E7F6DA9E097269C3D297C3328B93
31DF68B30D2D4B78BDFE915EBA477674B83CA5071152825BC54402E44F69E048
45D26C44A14583A6E74437FA9542C09640B9477F8CDC21BD9EC949F2206C3143
70478294A1673F6489B796FFF3CE4D91A036E5EDAAAE885C328701731EA8D2B4
E02F4306A94842289802AB60AF420474A58A890CFAD69852766BD49F1B489E8B
93AFACBBE8B5A6CCBEE5FD009BA381E89C59B64007AE7C395F33BFDECC496B62
8962AD79D1E15AE288A81D568CEE9CDD09CA8C14348500399F5ED28976F4A8E6
2B33851A6C4287879D20B4D81F17C87680B8DC86B04D24546569213E2940049F
48872ECDFBADCAE789CCB06E0E4788803A0E8C686D00BD35C769650F1AE77906
9C55D791A1748AEE545A75484B794BA9F7D38E18BF71F2DD818D5107E87A12DE
E2F0D3E42F2095B90D159A08FAF0BF7D9DFA0CDFEED6A76936657145B3997D8B
310DD82A83E9F9D1B91D5F4F40C5669FC3BDB53BBB0F79FE9DC0EDE76B4E4352
091879EDC2CF2CE1E1DCBA317B34C4D3F3A8CB338861D883C0B472F6F8FCC166
96B955C33796BD4A3BA37F45CD60CBB27A14D61AF876C15E6A2964615F93C38A
CD9819F7FB617F3632D77763F47324262CCDA5A6D5679BB9D7B8DE80592880CE
178C0725F4EF182BF946E5059BC5D490C43459421194E02D8108245C1150D3B8
8CDC3DFA75DEC6A2679080B9D1C537DD92628A04EAD133CFCC11A004A4EB2A34
1B88660904C58C2F2CBF41AAC5168D3AE5D669F86029A73479B7088FDEFD21B8
1061AD68F850E3A42591DAD85EBF1C8566AE3DE4D026409561AC79387EB6C654
4EFDA6284B51C30B9CECBB198F4970FA68D965AFD0C52AA1BF281A3AD4EA421B
44C2F86BFF9A735BAAF90FD167431E38B872A8A2681F73BAFDFA3752198CF70F
7CA32B8C651CD83CE0F74C86A207B37991B363F991BED6F6EF6924226DD2B1C4
D40BCEBF75D924D035120926F667A10EB7762557DE860B3716E62463B05AFDDE
BBD1376B86BE1FA568FB4A5F653E597023
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (mtii.dvi)
@start /Fa 134[44 1[60 44 46 32 33 33 44 46 42 46 69
23 44 1[23 46 42 25 37 46 37 46 42 9[85 9[76 3[30 62
1[54 1[63 2[62 1[39 4[23 5[42 42 42 42 2[23 4[32 32 20[42
5[46 46 12[{}42 83.022 /CMR10 rf /Fb 139[52 53 55 1[75
67 75 112 37 2[37 1[67 1[61 75 60 1[65 19[128 3[50 2[85
88 3[102 8[67 1[67 3[67 67 67 3[37 44[{}25 119.552 /CMBX12
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1387 260 a Fb(Midterm)45
b(I)t(I)g(EEE)g(161)939 431 y(Applied)g(Electromagnetics,)i(F)-11
b(all)46 b(2008)1417 684 y Fa(Instructor:)36 b(Dr.)h(Milica)27
b(Mark)n(o)n(vi)n(\023)-39 b(c)p -68 871 4134 12 v 0
TeXcolorgray 34 1113 a(1.)p 0 TeXcolorgray 41 w(Answ)n(er)27
b(the)h(follo)n(wing)e(questions:)p 0 TeXcolorgray 175
1279 a(\(a\))p 0 TeXcolorgray 42 w(Describ)r(e)h(ho)n(w)g(is)h
(inductance)f(de\014ned?)p 0 TeXcolorgray 170 1412 a(\(b\))p
0 TeXcolorgray 43 w(What)g(can)g(y)n(ou)f(conclude)h(ab)r(out)g(the)h
(magnetic)e(\014eld)i(around)e(the)h(inductor)g(if)h(a)f(1mA)g(curren)n
(t)f(\015o)n(ws)g(through)h(a)323 1512 y(1mH)g(and)h(1H)f(inductors.)p
0 TeXcolorgray 1979 5741 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 34 260 a Fa(2.)p 0 TeXcolorgray
41 w(Find)29 b(the)g(magnetic)f(\014eld)h(ev)n(erywhere)e(around)h(a)g
(hollo)n(w)g(metallic)g(conductor)g(as)g(sho)n(wn)g(b)r(elo)n(w.)40
b(Find)29 b(the)g(magnetic)140 360 y(\014eld)f(ev)n(erywhere.)p
0 TeXcolorgray 1979 5741 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 34 260 a Fa(3.)p 0 TeXcolorgray
41 w(Find)24 b(the)g(inductance)g(of)f(the)h(parallel)f(plate)g(w)n(a)n
(v)n(eguide)f(sho)n(wn)g(b)r(elo)n(w.)36 b(Assume)23
b(that)h(the)g(w)n(a)n(v)n(eguide)e(is)h(large)f(enough)140
360 y(to)28 b(assume)e(that)i(the)g(\014eld)g(is)g(the)g(same)f(as)g
(in)g(the)h(case)f(when)h(the)g(plates)f(are)g(in\014nite.)p
0 TeXcolorgray 1979 5741 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 34 260 a Fa(4.)p 0 TeXcolorgray
41 w(Find)28 b(the)g(direction)f(of)h(a)f(curren)n(t)g(in)h(the)g
(circuit)f(b)r(elo)n(w)g(if)i(the)f(magnetic)f(\014eld)h(c)n(hanges)e
(as)h(sho)n(wn)f(b)r(elo)n(w.)p 0 TeXcolorgray 1979 5741
a(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
